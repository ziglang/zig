// This file is generated by tools/update_clang_options.zig.
// zig fmt: off
const clang_options = @import("clang_options.zig");
const CliArg = clang_options.CliArg;
const flagpd1 = clang_options.flagpd1;
const flagpsl = clang_options.flagpsl;
const joinpd1 = clang_options.joinpd1;
const jspd1 = clang_options.jspd1;
const sepd1 = clang_options.sepd1;
const m = clang_options.m;
pub const data = blk: { @setEvalBranchQuota(6000); break :blk &[_]CliArg{
flagpd1("C"),
flagpd1("CC"),
.{
    .name = "E",
    .syntax = .flag,
    .zig_equivalent = .preprocess_only,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("EB"),
flagpd1("EL"),
flagpd1("Eonly"),
flagpd1("faapcs-bitfield-load"),
flagpd1("H"),
.{
    .name = "<input>",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = false,
    .psl = false,
},
flagpd1("I-"),
flagpd1("M"),
.{
    .name = "MD",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "MG",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "MM",
    .syntax = .flag,
    .zig_equivalent = .dep_file_mm,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "MMD",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "MP",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "MV",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("Mach"),
.{
    .name = "O0",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "O4",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "O",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("ObjC"),
flagpd1("ObjC++"),
flagpd1("P"),
flagpd1("Q"),
flagpd1("Qn"),
flagpd1("Qunused-arguments"),
flagpd1("Qy"),
.{
    .name = "S",
    .syntax = .flag,
    .zig_equivalent = .asm_only,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "<unknown>",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = false,
    .psl = false,
},
flagpd1("WCL4"),
flagpd1("Wall"),
flagpd1("Wdeprecated"),
flagpd1("Wframe-larger-than"),
flagpd1("Wlarge-by-value-copy"),
flagpd1("Wno-deprecated"),
flagpd1("Wno-rewrite-macros"),
flagpd1("Wno-write-strings"),
flagpd1("Wwrite-strings"),
flagpd1("X"),
sepd1("Xanalyzer"),
sepd1("Xarch_device"),
sepd1("Xarch_host"),
sepd1("Xassembler"),
sepd1("Xclang"),
sepd1("Xcuda-fatbinary"),
sepd1("Xcuda-ptxas"),
sepd1("Xflang"),
.{
    .name = "Xlinker",
    .syntax = .separate,
    .zig_equivalent = .for_linker,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
sepd1("Xopenmp-target"),
sepd1("Xpreprocessor"),
flagpd1("Z"),
flagpd1("Z-Xlinker-no-demangle"),
flagpd1("Z-reserved-lib-cckext"),
flagpd1("Z-reserved-lib-stdc++"),
sepd1("Zlinker-input"),
.{
    .name = "CLASSPATH",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "###",
    .syntax = .flag,
    .zig_equivalent = .dry_run,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "Brepro",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Brepro-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Bt",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Bt+",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "C",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "E",
    .syntax = .flag,
    .zig_equivalent = .preprocess_only,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "EP",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "FA",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "FC",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "FS",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fx",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "G1",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "G2",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GA",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GF",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GF-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GH",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GL",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GL-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GR",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GR-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GS",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GS-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GT",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GX",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GX-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "GZ",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gd",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Ge",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gh",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gm",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gm-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gr",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gregcall",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gv",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gw",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gw-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gy",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gy-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gz",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "H",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "HELP",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "J",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "JMC",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "LD",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "LDd",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "LN",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "MD",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "MDd",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
flagpsl("MT"),
.{
    .name = "MTd",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "P",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "QIfist",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "QIntel-jcc-erratum",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "?",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qfast_transcendentals",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qimprecise_fwaits",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qpar",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qsafe_fp_loads",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qspectre",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qspectre-load",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qspectre-load-cf",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qvec",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qvec-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "TC",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "TP",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "V",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "W0",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "W1",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "W2",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "W3",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "W4",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "WL",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "WX",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "WX-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Wall",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Wp64",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "X",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Y-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Yd",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Z7",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "ZH:MD5",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "ZH:SHA1",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "ZH:SHA_256",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "ZI",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Za",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:__cplusplus",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:alignedNew",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:alignedNew-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:auto",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:char8_t",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:char8_t-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:dllexportInlines",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:dllexportInlines-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:forScope",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:inline",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:rvalueCast",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:sizedDealloc",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:sizedDealloc-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:strictStrings",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:ternary",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:threadSafeInit",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:threadSafeInit-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:trigraphs",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:trigraphs-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:twoPhase",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:twoPhase-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:wchar_t",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Ze",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zg",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zi",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zl",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zo",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zo-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zp",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zs",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "analyze-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "await",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "bigobj",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "c",
    .syntax = .flag,
    .zig_equivalent = .c,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "d1PP",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "d1reportAllClassLayout",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "d2FastFail",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "d2Zi+",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "diagnostics:caret",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "diagnostics:classic",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "diagnostics:column",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "exportHeader",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "fp:except",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "fp:except-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "fp:fast",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "fp:precise",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "fp:strict",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "fsanitize=address",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "help",
    .syntax = .flag,
    .zig_equivalent = .driver_punt,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "homeparams",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "hotpatch",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "kernel",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "kernel-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "nologo",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "openmp",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "openmp-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "openmp:experimental",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "permissive",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "permissive-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "sdl",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "sdl-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "showFilenames",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "showFilenames-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "showIncludes",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "showIncludes:user",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "translateInclude",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "u",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "utf-8",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "validate-charset",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "validate-charset-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "vmb",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "vmg",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "vmm",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "vms",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "vmv",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "volatile:iso",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "volatile:ms",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "w",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "all-warnings",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "analyze",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "analyzer-no-default-checks",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "assemble",
    .syntax = .flag,
    .zig_equivalent = .asm_only,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "assert",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "bootclasspath",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "classpath",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "comments",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "comments-in-macros",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "compile",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "constant-cfstrings",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "debug",
    .syntax = .flag,
    .zig_equivalent = .debug,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "define-macro",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "dependencies",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "dyld-prefix",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "encoding",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "entry",
    .syntax = .flag,
    .zig_equivalent = .entry,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "extdirs",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "extra-warnings",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "for-linker",
    .syntax = .separate,
    .zig_equivalent = .for_linker,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "force-link",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "help-hidden",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-barrier",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-directory",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-directory-after",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-prefix",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-with-prefix",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-with-prefix-after",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-with-prefix-before",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "language",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "library-directory",
    .syntax = .separate,
    .zig_equivalent = .lib_dir,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "mhwdiv",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "migrate",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-line-commands",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-standard-includes",
    .syntax = .flag,
    .zig_equivalent = .nostdlibinc,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-standard-libraries",
    .syntax = .flag,
    .zig_equivalent = .nostdlib,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-undefined",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-warnings",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "optimize",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "output",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "output-class-directory",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "param",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "precompile",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "prefix",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "preprocess",
    .syntax = .flag,
    .zig_equivalent = .preprocess_only,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-diagnostic-categories",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-file-name",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-missing-file-dependencies",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-prog-name",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "profile",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "profile-blocks",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "resource",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "rtlib",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "serialize-diagnostics",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "signed-char",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "std",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "stdlib",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "sysroot",
    .syntax = .separate,
    .zig_equivalent = .sysroot,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "target-help",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "trace-includes",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "undefine-macro",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "unsigned-char",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "user-dependencies",
    .syntax = .flag,
    .zig_equivalent = .dep_file_mm,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "verbose",
    .syntax = .flag,
    .zig_equivalent = .verbose,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "version",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "write-dependencies",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "write-user-dependencies",
    .syntax = .flag,
    .zig_equivalent = .dep_file,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
sepd1("add-plugin"),
flagpd1("faligned-alloc-unavailable"),
flagpd1("all_load"),
sepd1("allowable_client"),
flagpd1("cfg-add-implicit-dtors"),
flagpd1("unoptimized-cfg"),
flagpd1("analyze"),
sepd1("analyze-function"),
sepd1("analyzer-checker"),
flagpd1("analyzer-checker-help"),
flagpd1("analyzer-checker-help-alpha"),
flagpd1("analyzer-checker-help-developer"),
flagpd1("analyzer-checker-option-help"),
flagpd1("analyzer-checker-option-help-alpha"),
flagpd1("analyzer-checker-option-help-developer"),
sepd1("analyzer-config"),
sepd1("analyzer-config-compatibility-mode"),
flagpd1("analyzer-config-help"),
sepd1("analyzer-constraints"),
flagpd1("analyzer-disable-all-checks"),
sepd1("analyzer-disable-checker"),
flagpd1("analyzer-disable-retry-exhausted"),
flagpd1("analyzer-display-progress"),
sepd1("analyzer-dump-egraph"),
sepd1("analyzer-inline-max-stack-depth"),
sepd1("analyzer-inlining-mode"),
flagpd1("analyzer-list-enabled-checkers"),
sepd1("analyzer-max-loop"),
flagpd1("analyzer-opt-analyze-headers"),
flagpd1("analyzer-opt-analyze-nested-blocks"),
sepd1("analyzer-output"),
sepd1("analyzer-purge"),
flagpd1("analyzer-stats"),
sepd1("analyzer-store"),
flagpd1("analyzer-viz-egraph-graphviz"),
flagpd1("analyzer-werror"),
flagpd1("fslp-vectorize-aggressive"),
flagpd1("fno-slp-vectorize-aggressive"),
flagpd1("ftree-vectorize"),
flagpd1("fno-tree-vectorize"),
flagpd1("ftree-slp-vectorize"),
flagpd1("fno-tree-slp-vectorize"),
flagpd1("fterminated-vtables"),
flagpd1("grecord-gcc-switches"),
flagpd1("gno-record-gcc-switches"),
flagpd1("nocudainc"),
flagpd1("nocudalib"),
.{
    .name = "system-header-prefix",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-system-header-prefix",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("integrated-as"),
flagpd1("no-integrated-as"),
flagpd1("shared-libasan"),
.{
    .name = "Gs",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "O1",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "O2",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Ob0",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Ob1",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Ob2",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Od",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Og",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Oi",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Oi-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Os",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Ot",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Ox",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Oy",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Oy-",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
flagpd1("frecord-gcc-switches"),
flagpd1("fno-record-gcc-switches"),
flagpd1("fident"),
flagpd1("fno-ident"),
flagpd1("fexpensive-optimizations"),
flagpd1("fno-expensive-optimizations"),
flagpd1("fdefer-pop"),
flagpd1("fno-defer-pop"),
flagpd1("fextended-identifiers"),
flagpd1("fno-extended-identifiers"),
flagpd1("fno-sanitize-blacklist"),
flagpd1("fcuda-rdc"),
flagpd1("fno-cuda-rdc"),
flagpd1("fhonor-infinites"),
flagpd1("fno-honor-infinites"),
flagpd1("findirect-virtual-calls"),
sepd1("fnew-alignment"),
flagpd1("faligned-new"),
flagpd1("fno-aligned-new"),
flagpd1("fsched-interblock"),
.{
    .name = "ansi",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
sepd1("arch"),
flagpd1("arch_errors_fatal"),
sepd1("arch_only"),
flagpd1("arcmt-migrate-emit-errors"),
sepd1("arcmt-migrate-report-output"),
flagpd1("ast-dump"),
flagpd1("ast-dump-all"),
flagpd1("ast-dump-decl-types"),
sepd1("ast-dump-filter"),
flagpd1("ast-dump-lookups"),
flagpd1("ast-list"),
sepd1("ast-merge"),
flagpd1("ast-print"),
flagpd1("ast-view"),
sepd1("aux-target-cpu"),
sepd1("aux-target-feature"),
sepd1("aux-triple"),
flagpd1("bind_at_load"),
flagpd1("building-pch-with-obj"),
flagpd1("bundle"),
sepd1("bundle_loader"),
.{
    .name = "c",
    .syntax = .flag,
    .zig_equivalent = .c,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("canonical-prefixes"),
flagpd1("cc1"),
flagpd1("cc1as"),
flagpd1("ccc-arcmt-check"),
sepd1("ccc-arcmt-migrate"),
flagpd1("ccc-arcmt-modify"),
sepd1("ccc-gcc-name"),
sepd1("ccc-install-dir"),
sepd1("ccc-objcmt-migrate"),
flagpd1("ccc-print-bindings"),
flagpd1("ccc-print-phases"),
flagpd1("cfguard"),
flagpd1("cfguard-no-checks"),
sepd1("chain-include"),
flagpd1("cl-denorms-are-zero"),
flagpd1("cl-fast-relaxed-math"),
flagpd1("cl-finite-math-only"),
flagpd1("cl-fp32-correctly-rounded-divide-sqrt"),
flagpd1("cl-kernel-arg-info"),
flagpd1("cl-mad-enable"),
flagpd1("cl-no-signed-zeros"),
flagpd1("cl-no-stdinc"),
flagpd1("cl-opt-disable"),
flagpd1("cl-single-precision-constant"),
flagpd1("cl-strict-aliasing"),
flagpd1("cl-uniform-work-group-size"),
flagpd1("cl-unsafe-math-optimizations"),
flagpd1("clear-ast-before-backend"),
sepd1("code-completion-at"),
flagpd1("code-completion-brief-comments"),
flagpd1("code-completion-macros"),
flagpd1("code-completion-patterns"),
flagpd1("code-completion-with-fixits"),
.{
    .name = "combine",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("compiler-options-dump"),
.{
    .name = "compress-debug-sections",
    .syntax = .flag,
    .zig_equivalent = .compress_debug_sections,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "config",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "coverage",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
sepd1("coverage-data-file"),
sepd1("coverage-notes-file"),
flagpd1("cpp"),
flagpd1("cpp-precomp"),
.{
    .name = "cuda-compile-host-device",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "cuda-device-only",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "cuda-host-only",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "cuda-noopt-device-debug",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "cuda-path-ignore-env",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("dA"),
flagpd1("dD"),
flagpd1("dI"),
flagpd1("dM"),
flagpd1("d"),
flagpd1("dead_strip"),
flagpd1("debug-forward-template-params"),
flagpd1("debug-info-macro"),
sepd1("default-function-attr"),
sepd1("defsym"),
sepd1("dependency-dot"),
sepd1("dependency-file"),
flagpd1("detailed-preprocessing-record"),
sepd1("diagnostic-log-file"),
sepd1("serialize-diagnostic-file"),
flagpd1("disable-O0-optnone"),
flagpd1("disable-free"),
flagpd1("disable-lifetime-markers"),
flagpd1("disable-llvm-optzns"),
flagpd1("disable-llvm-passes"),
flagpd1("disable-llvm-verifier"),
flagpd1("disable-noundef-analysis"),
flagpd1("disable-objc-default-synthesize-properties"),
flagpd1("disable-pragma-debug-crash"),
flagpd1("disable-red-zone"),
flagpd1("discard-value-names"),
flagpd1("dump-coverage-mapping"),
flagpd1("dump-deserialized-decls"),
flagpd1("dump-raw-tokens"),
flagpd1("dump-tokens"),
flagpd1("dumpmachine"),
flagpd1("dumpspecs"),
flagpd1("dumpversion"),
sepd1("dwarf-debug-flags"),
sepd1("dwarf-debug-producer"),
flagpd1("dwarf-explicit-import"),
flagpd1("dwarf-ext-refs"),
sepd1("dylib_file"),
flagpd1("dylinker"),
flagpd1("dynamic"),
.{
    .name = "dynamiclib",
    .syntax = .flag,
    .zig_equivalent = .shared,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("ehcontguard"),
flagpd1("emit-ast"),
flagpd1("emit-codegen-only"),
flagpd1("emit-header-module"),
flagpd1("emit-html"),
flagpd1("emit-interface-stubs"),
.{
    .name = "emit-llvm",
    .syntax = .flag,
    .zig_equivalent = .emit_llvm,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("emit-llvm-bc"),
flagpd1("emit-llvm-only"),
flagpd1("emit-llvm-uselists"),
flagpd1("emit-merged-ifs"),
flagpd1("emit-module"),
flagpd1("emit-module-interface"),
flagpd1("emit-obj"),
flagpd1("emit-pch"),
.{
    .name = "emit-static-lib",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang"),
.{
    .name = "end-no-unused-arguments",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
sepd1("error-on-deserialized-decl"),
sepd1("exception-model"),
sepd1("exported_symbols_list"),
flagpd1("extract-api"),
.{
    .name = "fPIC",
    .syntax = .flag,
    .zig_equivalent = .pic,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "fPIE",
    .syntax = .flag,
    .zig_equivalent = .pie,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("faapcs-bitfield-width"),
flagpd1("faccess-control"),
flagpd1("faddrsig"),
flagpd1("faggressive-function-elimination"),
flagpd1("falign-commons"),
flagpd1("falign-functions"),
flagpd1("falign-jumps"),
flagpd1("falign-labels"),
flagpd1("falign-loops"),
flagpd1("faligned-allocation"),
flagpd1("fall-intrinsics"),
flagpd1("fallow-editor-placeholders"),
flagpd1("fallow-half-arguments-and-returns"),
flagpd1("fallow-pch-with-different-modules-cache-path"),
flagpd1("fallow-pch-with-compiler-errors"),
flagpd1("fallow-pcm-with-compiler-errors"),
flagpd1("fallow-unsupported"),
flagpd1("falternative-parameter-statement"),
flagpd1("faltivec"),
flagpd1("fanalyzed-objects-for-unparse"),
flagpd1("fkeep-inline-functions"),
flagpd1("fansi-escape-codes"),
flagpd1("fapple-kext"),
flagpd1("fapple-link-rtlib"),
flagpd1("fapple-pragma-pack"),
flagpd1("fapplication-extension"),
flagpd1("fapply-global-visibility-to-externs"),
flagpd1("fapprox-func"),
flagpd1("fasm"),
flagpd1("fasm-blocks"),
flagpd1("fassociative-math"),
flagpd1("fassume-sane-operator-new"),
flagpd1("fast"),
flagpd1("fastcp"),
flagpd1("fastf"),
flagpd1("fasync-exceptions"),
flagpd1("fasynchronous-unwind-tables"),
flagpd1("fauto-profile"),
flagpd1("fauto-profile-accurate"),
flagpd1("fautolink"),
flagpd1("fautomatic"),
flagpd1("fbackslash"),
flagpd1("fbacktrace"),
flagpd1("fblocks"),
flagpd1("fblocks-runtime-optional"),
flagpd1("fborland-extensions"),
flagpd1("fbounds-check"),
sepd1("fbracket-depth"),
flagpd1("fbranch-count-reg"),
.{
    .name = "fbuiltin",
    .syntax = .flag,
    .zig_equivalent = .builtin,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fbuiltin-module-map"),
flagpd1("fcall-saved-x10"),
flagpd1("fcall-saved-x11"),
flagpd1("fcall-saved-x12"),
flagpd1("fcall-saved-x13"),
flagpd1("fcall-saved-x14"),
flagpd1("fcall-saved-x15"),
flagpd1("fcall-saved-x18"),
flagpd1("fcall-saved-x8"),
flagpd1("fcall-saved-x9"),
flagpd1("fcaller-saves"),
.{
    .name = "fcaret-diagnostics",
    .syntax = .flag,
    .zig_equivalent = .color_diagnostics,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
sepd1("fcaret-diagnostics-max-lines"),
flagpd1("fcf-protection"),
flagpd1("fchar8_t"),
flagpd1("fcheck-array-temporaries"),
.{
    .name = "fcolor-diagnostics",
    .syntax = .flag,
    .zig_equivalent = .color_diagnostics,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fcommon"),
flagpd1("fcompatibility-qualified-id-block-type-checking"),
flagpd1("fcomplete-member-pointers"),
flagpd1("fconcepts-ts"),
flagpd1("fconst-strings"),
flagpd1("fconstant-cfstrings"),
sepd1("fconstant-string-class"),
sepd1("fconstexpr-backtrace-limit"),
sepd1("fconstexpr-depth"),
sepd1("fconstexpr-steps"),
flagpd1("fconvergent-functions"),
flagpd1("fcoroutines-ts"),
flagpd1("fcoverage-mapping"),
flagpd1("fcray-pointer"),
flagpd1("fcreate-profile"),
flagpd1("fcs-profile-generate"),
flagpd1("fcuda-allow-variadic-functions"),
flagpd1("fcuda-approx-transcendentals"),
flagpd1("fcuda-flush-denormals-to-zero"),
sepd1("fcuda-include-gpubinary"),
flagpd1("fcuda-is-device"),
flagpd1("fcuda-short-ptr"),
flagpd1("fcxx-exceptions"),
flagpd1("fcxx-modules"),
flagpd1("fc++-static-destructors"),
flagpd1("fd-lines-as-code"),
flagpd1("fd-lines-as-comments"),
flagpd1("fdata-sections"),
sepd1("fdebug-compilation-dir"),
flagpd1("fdebug-dump-all"),
flagpd1("fdebug-dump-parse-tree"),
flagpd1("fdebug-dump-parse-tree-no-sema"),
flagpd1("fdebug-dump-parsing-log"),
flagpd1("fdebug-dump-provenance"),
flagpd1("fdebug-dump-symbols"),
flagpd1("fdebug-info-for-profiling"),
flagpd1("fdebug-macro"),
flagpd1("fdebug-measure-parse-tree"),
flagpd1("fdebug-module-writer"),
flagpd1("fdebug-pass-arguments"),
flagpd1("fdebug-pass-manager"),
flagpd1("fdebug-pass-structure"),
flagpd1("fdebug-pre-fir-tree"),
flagpd1("fdebug-ranges-base-address"),
flagpd1("fdebug-types-section"),
flagpd1("fdebug-unparse"),
flagpd1("fdebug-unparse-no-sema"),
flagpd1("fdebug-unparse-with-symbols"),
flagpd1("fdebugger-cast-result-to-id"),
flagpd1("fdebugger-objc-literal"),
flagpd1("fdebugger-support"),
flagpd1("fdeclare-opencl-builtins"),
flagpd1("fdeclspec"),
flagpd1("fdefault-double-8"),
flagpd1("fdefault-inline"),
flagpd1("fdefault-integer-8"),
flagpd1("fdefault-real-8"),
flagpd1("fdelayed-template-parsing"),
flagpd1("fdelete-null-pointer-checks"),
flagpd1("fdeprecated-macro"),
flagpd1("fdevirtualize"),
flagpd1("fdevirtualize-speculatively"),
flagpd1("fdiagnostics-absolute-paths"),
flagpd1("fdiagnostics-color"),
flagpd1("fdiagnostics-fixit-info"),
sepd1("fdiagnostics-format"),
flagpd1("fdiagnostics-parseable-fixits"),
flagpd1("fdiagnostics-print-source-range-info"),
sepd1("fdiagnostics-show-category"),
flagpd1("fdiagnostics-show-hotness"),
flagpd1("fdiagnostics-show-note-include-stack"),
flagpd1("fdiagnostics-show-option"),
flagpd1("fdiagnostics-show-template-tree"),
flagpd1("fdigraphs"),
flagpd1("fdirect-access-external-data"),
flagpd1("fdisable-module-hash"),
flagpd1("fdiscard-value-names"),
flagpd1("fdollar-ok"),
flagpd1("fdollars-in-identifiers"),
flagpd1("fdouble-square-bracket-attributes"),
flagpd1("fdump-fortran-optimized"),
flagpd1("fdump-fortran-original"),
flagpd1("fdump-parse-tree"),
flagpd1("fdump-record-layouts"),
flagpd1("fdump-record-layouts-canonical"),
flagpd1("fdump-record-layouts-complete"),
flagpd1("fdump-record-layouts-simple"),
flagpd1("fdump-vtable-layouts"),
flagpd1("fdwarf2-cfi-asm"),
flagpd1("fdwarf-directory-asm"),
flagpd1("fdwarf-exceptions"),
flagpd1("felide-constructors"),
flagpd1("feliminate-unused-debug-symbols"),
flagpd1("feliminate-unused-debug-types"),
flagpd1("fembed-bitcode"),
flagpd1("fembed-bitcode-marker"),
flagpd1("femit-all-decls"),
flagpd1("femulated-tls"),
flagpd1("fenable-matrix"),
flagpd1("fencode-extended-block-signature"),
sepd1("ferror-limit"),
flagpd1("fescaping-block-tail-calls"),
flagpd1("fexceptions"),
flagpd1("fexperimental-isel"),
flagpd1("fexperimental-new-constant-interpreter"),
flagpd1("fexperimental-new-pass-manager"),
flagpd1("fexperimental-relative-c++-abi-vtables"),
flagpd1("fexperimental-strict-floating-point"),
flagpd1("fexternal-blas"),
flagpd1("fexternc-nounwind"),
flagpd1("ff2c"),
flagpd1("ffake-address-space-map"),
flagpd1("ffast-math"),
flagpd1("ffat-lto-objects"),
flagpd1("fcheck-new"),
flagpd1("fimplicit-modules-use-lock"),
flagpd1("ffine-grained-bitfield-accesses"),
flagpd1("ffinite-loops"),
flagpd1("ffinite-math-only"),
flagpd1("finline-limit"),
flagpd1("ffixed-a0"),
flagpd1("ffixed-a1"),
flagpd1("ffixed-a2"),
flagpd1("ffixed-a3"),
flagpd1("ffixed-a4"),
flagpd1("ffixed-a5"),
flagpd1("ffixed-a6"),
flagpd1("ffixed-d0"),
flagpd1("ffixed-d1"),
flagpd1("ffixed-d2"),
flagpd1("ffixed-d3"),
flagpd1("ffixed-d4"),
flagpd1("ffixed-d5"),
flagpd1("ffixed-d6"),
flagpd1("ffixed-d7"),
flagpd1("ffixed-form"),
flagpd1("ffixed-point"),
flagpd1("ffixed-r19"),
flagpd1("ffixed-r9"),
flagpd1("ffixed-x1"),
flagpd1("ffixed-x10"),
flagpd1("ffixed-x11"),
flagpd1("ffixed-x12"),
flagpd1("ffixed-x13"),
flagpd1("ffixed-x14"),
flagpd1("ffixed-x15"),
flagpd1("ffixed-x16"),
flagpd1("ffixed-x17"),
flagpd1("ffixed-x18"),
flagpd1("ffixed-x19"),
flagpd1("ffixed-x2"),
flagpd1("ffixed-x20"),
flagpd1("ffixed-x21"),
flagpd1("ffixed-x22"),
flagpd1("ffixed-x23"),
flagpd1("ffixed-x24"),
flagpd1("ffixed-x25"),
flagpd1("ffixed-x26"),
flagpd1("ffixed-x27"),
flagpd1("ffixed-x28"),
flagpd1("ffixed-x29"),
flagpd1("ffixed-x3"),
flagpd1("ffixed-x30"),
flagpd1("ffixed-x31"),
flagpd1("ffixed-x4"),
flagpd1("ffixed-x5"),
flagpd1("ffixed-x6"),
flagpd1("ffixed-x7"),
flagpd1("ffixed-x8"),
flagpd1("ffixed-x9"),
flagpd1("ffloat-store"),
flagpd1("ffor-scope"),
flagpd1("fforbid-guard-variables"),
flagpd1("fforce-dwarf-frame"),
flagpd1("fforce-emit-vtables"),
flagpd1("fforce-enable-int128"),
flagpd1("ffree-form"),
flagpd1("ffreestanding"),
flagpd1("ffriend-injection"),
flagpd1("ffrontend-optimize"),
flagpd1("ffunction-attribute-list"),
.{
    .name = "ffunction-sections",
    .syntax = .flag,
    .zig_equivalent = .function_sections,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fgcse"),
flagpd1("fgcse-after-reload"),
flagpd1("fgcse-las"),
flagpd1("fgcse-sm"),
.{
    .name = "fget-definition",
    .syntax = .{.multi_arg=3},
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fget-symbols-sources"),
flagpd1("fglobal-isel"),
flagpd1("fgnu"),
flagpd1("fgnu89-inline"),
flagpd1("fgnu-inline-asm"),
flagpd1("fgnu-keywords"),
flagpd1("fgnu-runtime"),
flagpd1("fgpu-allow-device-init"),
flagpd1("fgpu-defer-diag"),
flagpd1("fgpu-exclude-wrong-side-overloads"),
flagpd1("fgpu-flush-denormals-to-zero"),
flagpd1("fgpu-rdc"),
flagpd1("fgpu-sanitize"),
flagpd1("fhalf-no-semantic-interposition"),
flagpd1("fheinous-gnu-extensions"),
flagpd1("fhip-dump-offload-linker-script"),
flagpd1("fhip-fp32-correctly-rounded-divide-sqrt"),
flagpd1("fhip-new-launch-api"),
flagpd1("fhonor-infinities"),
flagpd1("fhonor-nans"),
flagpd1("fhosted"),
flagpd1("fignore-exceptions"),
sepd1("filelist"),
sepd1("filetype"),
flagpd1("fimplement-inlines"),
flagpd1("fimplicit-module-maps"),
flagpd1("fimplicit-modules"),
flagpd1("fimplicit-none"),
flagpd1("fimplicit-templates"),
flagpd1("finclude-default-header"),
flagpd1("finit-local-zero"),
flagpd1("finline"),
flagpd1("finline-functions"),
flagpd1("finline-functions-called-once"),
flagpd1("finline-hint-functions"),
flagpd1("finline-small-functions"),
flagpd1("finstrument-function-entry-bare"),
flagpd1("finstrument-functions"),
flagpd1("finstrument-functions-after-inlining"),
flagpd1("finteger-4-integer-8"),
flagpd1("fintegrated-as"),
flagpd1("fintegrated-cc1"),
sepd1("fintrinsic-modules-path"),
flagpd1("fipa-cp"),
flagpd1("fivopts"),
flagpd1("fix-only-warnings"),
flagpd1("fix-what-you-can"),
flagpd1("fixit"),
flagpd1("fixit-recompile"),
flagpd1("fixit-to-temporary"),
flagpd1("fjump-tables"),
flagpd1("fkeep-static-consts"),
flagpd1("flarge-sizes"),
flagpd1("flat_namespace"),
flagpd1("flax-vector-conversions"),
flagpd1("flegacy-pass-manager"),
flagpd1("flimit-debug-info"),
flagpd1("flogical-abbreviations"),
.{
    .name = "flto",
    .syntax = .flag,
    .zig_equivalent = .lto,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("flto=auto"),
flagpd1("flto=jobserver"),
flagpd1("flto-unit"),
flagpd1("flto-visibility-public-std"),
sepd1("fmacro-backtrace-limit"),
flagpd1("fmath-errno"),
flagpd1("fmax-identifier-length"),
flagpd1("fmemory-profile"),
flagpd1("fmerge-all-constants"),
flagpd1("fmerge-constants"),
flagpd1("fmerge-functions"),
flagpd1("fminimize-whitespace"),
sepd1("fmodule-feature"),
flagpd1("fmodule-file-deps"),
sepd1("fmodule-implementation-of"),
flagpd1("fmodule-map-file-home-is-cwd"),
flagpd1("fmodule-maps"),
flagpd1("fmodule-private"),
flagpd1("fmodules"),
flagpd1("fmodules-codegen"),
flagpd1("fmodules-debuginfo"),
flagpd1("fmodules-decluse"),
flagpd1("fmodules-disable-diagnostic-validation"),
flagpd1("fmodules-hash-content"),
flagpd1("fmodules-local-submodule-visibility"),
flagpd1("fmodules-search-all"),
flagpd1("fmodules-strict-context-hash"),
flagpd1("fmodules-strict-decluse"),
flagpd1("fmodules-ts"),
sepd1("fmodules-user-build-path"),
flagpd1("fmodules-validate-input-files-content"),
flagpd1("fmodules-validate-once-per-build-session"),
flagpd1("fmodules-validate-system-headers"),
flagpd1("fmodulo-sched"),
flagpd1("fmodulo-sched-allow-regmoves"),
flagpd1("fms-compatibility"),
flagpd1("fms-extensions"),
flagpd1("fms-hotpatch"),
flagpd1("fms-volatile"),
flagpd1("fmudflap"),
flagpd1("fmudflapth"),
flagpd1("fnative-half-arguments-and-returns"),
flagpd1("fnative-half-type"),
flagpd1("fnested-functions"),
flagpd1("fnew-infallible"),
flagpd1("fnext-runtime"),
.{
    .name = "fno-PIC",
    .syntax = .flag,
    .zig_equivalent = .no_pic,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "fno-PIE",
    .syntax = .flag,
    .zig_equivalent = .no_pie,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-aapcs-bitfield-width"),
flagpd1("fno-access-control"),
flagpd1("fno-addrsig"),
flagpd1("fno-aggressive-function-elimination"),
flagpd1("fno-align-commons"),
flagpd1("fno-align-functions"),
flagpd1("fno-align-jumps"),
flagpd1("fno-align-labels"),
flagpd1("fno-align-loops"),
flagpd1("fno-aligned-allocation"),
flagpd1("fno-all-intrinsics"),
flagpd1("fno-allow-editor-placeholders"),
flagpd1("fno-altivec"),
flagpd1("fno-analyzed-objects-for-unparse"),
flagpd1("fno-keep-inline-functions"),
flagpd1("fno-apple-pragma-pack"),
flagpd1("fno-application-extension"),
flagpd1("fno-approx-func"),
flagpd1("fno-asm"),
flagpd1("fno-asm-blocks"),
flagpd1("fno-associative-math"),
flagpd1("fno-assume-sane-operator-new"),
flagpd1("fno-async-exceptions"),
flagpd1("fno-asynchronous-unwind-tables"),
flagpd1("fno-auto-profile"),
flagpd1("fno-auto-profile-accurate"),
flagpd1("fno-autolink"),
flagpd1("fno-automatic"),
flagpd1("fno-backslash"),
flagpd1("fno-backtrace"),
flagpd1("fno-bitfield-type-align"),
flagpd1("fno-blocks"),
flagpd1("fno-borland-extensions"),
flagpd1("fno-bounds-check"),
flagpd1("fno-branch-count-reg"),
.{
    .name = "fno-builtin",
    .syntax = .flag,
    .zig_equivalent = .no_builtin,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-caller-saves"),
.{
    .name = "fno-caret-diagnostics",
    .syntax = .flag,
    .zig_equivalent = .no_color_diagnostics,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-char8_t"),
flagpd1("fno-check-array-temporaries"),
.{
    .name = "fno-color-diagnostics",
    .syntax = .flag,
    .zig_equivalent = .no_color_diagnostics,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-common"),
flagpd1("fno-complete-member-pointers"),
flagpd1("fno-concept-satisfaction-caching"),
flagpd1("fno-const-strings"),
flagpd1("fno-constant-cfstrings"),
flagpd1("fno-coroutines-ts"),
flagpd1("fno-coverage-mapping"),
flagpd1("fno-crash-diagnostics"),
flagpd1("fno-cray-pointer"),
flagpd1("fno-cuda-approx-transcendentals"),
flagpd1("fno-cuda-flush-denormals-to-zero"),
flagpd1("fno-cuda-host-device-constexpr"),
flagpd1("fno-cuda-short-ptr"),
flagpd1("fno-cxx-exceptions"),
flagpd1("fno-cxx-modules"),
flagpd1("fno-c++-static-destructors"),
flagpd1("fno-d-lines-as-code"),
flagpd1("fno-d-lines-as-comments"),
flagpd1("fno-data-sections"),
flagpd1("fno-debug-info-for-profiling"),
flagpd1("fno-debug-macro"),
flagpd1("fno-debug-pass-manager"),
flagpd1("fno-debug-ranges-base-address"),
flagpd1("fno-debug-types-section"),
flagpd1("fno-declspec"),
flagpd1("fno-default-inline"),
flagpd1("fno-delayed-template-parsing"),
flagpd1("fno-delete-null-pointer-checks"),
flagpd1("fno-deprecated-macro"),
flagpd1("fno-devirtualize"),
flagpd1("fno-devirtualize-speculatively"),
flagpd1("fno-diagnostics-color"),
flagpd1("fno-diagnostics-fixit-info"),
flagpd1("fno-diagnostics-show-hotness"),
flagpd1("fno-diagnostics-show-note-include-stack"),
flagpd1("fno-diagnostics-show-option"),
flagpd1("fno-diagnostics-use-presumed-location"),
flagpd1("fno-digraphs"),
flagpd1("fno-direct-access-external-data"),
flagpd1("fno-discard-value-names"),
flagpd1("fno-dllexport-inlines"),
flagpd1("fno-dollar-ok"),
flagpd1("fno-dollars-in-identifiers"),
flagpd1("fno-double-square-bracket-attributes"),
flagpd1("fno-dump-fortran-optimized"),
flagpd1("fno-dump-fortran-original"),
flagpd1("fno-dump-parse-tree"),
flagpd1("fno-dwarf2-cfi-asm"),
flagpd1("fno-dwarf-directory-asm"),
flagpd1("fno-elide-constructors"),
flagpd1("fno-elide-type"),
flagpd1("fno-eliminate-unused-debug-symbols"),
flagpd1("fno-eliminate-unused-debug-types"),
flagpd1("fno-emulated-tls"),
flagpd1("fno-escaping-block-tail-calls"),
flagpd1("fno-exceptions"),
flagpd1("fno-experimental-isel"),
flagpd1("fno-experimental-new-pass-manager"),
flagpd1("fno-experimental-relative-c++-abi-vtables"),
flagpd1("fno-external-blas"),
flagpd1("fno-f2c"),
flagpd1("fno-fast-math"),
flagpd1("fno-fat-lto-objects"),
flagpd1("fno-check-new"),
flagpd1("fno-implicit-modules-use-lock"),
flagpd1("fno-fine-grained-bitfield-accesses"),
flagpd1("fno-finite-loops"),
flagpd1("fno-finite-math-only"),
flagpd1("fno-inline-limit"),
flagpd1("fno-fixed-point"),
flagpd1("fno-float-store"),
flagpd1("fno-for-scope"),
flagpd1("fno-force-dwarf-frame"),
flagpd1("fno-force-emit-vtables"),
flagpd1("fno-force-enable-int128"),
flagpd1("fno-friend-injection"),
flagpd1("fno-frontend-optimize"),
flagpd1("fno-function-attribute-list"),
.{
    .name = "fno-function-sections",
    .syntax = .flag,
    .zig_equivalent = .no_function_sections,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-gcse"),
flagpd1("fno-gcse-after-reload"),
flagpd1("fno-gcse-las"),
flagpd1("fno-gcse-sm"),
flagpd1("fno-global-isel"),
flagpd1("fno-gnu"),
flagpd1("fno-gnu89-inline"),
flagpd1("fno-gnu-inline-asm"),
flagpd1("fno-gnu-keywords"),
flagpd1("fno-gpu-allow-device-init"),
flagpd1("fno-gpu-defer-diag"),
flagpd1("fno-gpu-exclude-wrong-side-overloads"),
flagpd1("fno-gpu-flush-denormals-to-zero"),
flagpd1("fno-gpu-rdc"),
flagpd1("fno-gpu-sanitize"),
flagpd1("fno-hip-fp32-correctly-rounded-divide-sqrt"),
flagpd1("fno-hip-new-launch-api"),
flagpd1("fno-honor-infinities"),
flagpd1("fno-honor-nans"),
flagpd1("fno-implement-inlines"),
flagpd1("fno-implicit-module-maps"),
flagpd1("fno-implicit-modules"),
flagpd1("fno-implicit-none"),
flagpd1("fno-implicit-templates"),
flagpd1("fno-init-local-zero"),
flagpd1("fno-inline"),
flagpd1("fno-inline-functions"),
flagpd1("fno-inline-functions-called-once"),
flagpd1("fno-inline-small-functions"),
flagpd1("fno-integer-4-integer-8"),
flagpd1("fno-integrated-as"),
flagpd1("fno-integrated-cc1"),
flagpd1("fno-ipa-cp"),
flagpd1("fno-ivopts"),
flagpd1("fno-jump-tables"),
flagpd1("fno-keep-static-consts"),
flagpd1("fno-lax-vector-conversions"),
flagpd1("fno-legacy-pass-manager"),
flagpd1("fno-limit-debug-info"),
flagpd1("fno-logical-abbreviations"),
.{
    .name = "fno-lto",
    .syntax = .flag,
    .zig_equivalent = .no_lto,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-lto-unit"),
flagpd1("fno-math-builtin"),
flagpd1("fno-math-errno"),
flagpd1("fno-max-identifier-length"),
flagpd1("fno-max-type-align"),
flagpd1("fno-memory-profile"),
flagpd1("fno-merge-all-constants"),
flagpd1("fno-merge-constants"),
flagpd1("fno-minimize-whitespace"),
flagpd1("fno-module-file-deps"),
flagpd1("fno-module-maps"),
flagpd1("fno-module-private"),
flagpd1("fno-modules"),
flagpd1("fno-modules-decluse"),
flagpd1("fno-modules-error-recovery"),
flagpd1("fno-modules-global-index"),
flagpd1("fno-modules-search-all"),
flagpd1("fno-strict-modules-decluse"),
flagpd1("fno_modules-validate-input-files-content"),
flagpd1("fno-modules-validate-system-headers"),
flagpd1("fno-modulo-sched"),
flagpd1("fno-modulo-sched-allow-regmoves"),
flagpd1("fno-ms-compatibility"),
flagpd1("fno-ms-extensions"),
flagpd1("fno-new-infallible"),
flagpd1("fno-non-call-exceptions"),
flagpd1("fno-objc-arc"),
flagpd1("fno-objc-arc-exceptions"),
flagpd1("fno-objc-avoid-heapify-local-blocks"),
flagpd1("fno-objc-convert-messages-to-runtime-calls"),
flagpd1("fno-objc-encode-cxx-class-template-spec"),
flagpd1("fno-objc-exceptions"),
flagpd1("fno-objc-infer-related-result-type"),
flagpd1("fno-objc-legacy-dispatch"),
flagpd1("fno-objc-nonfragile-abi"),
flagpd1("fno-objc-weak"),
flagpd1("fno-offload-lto"),
.{
    .name = "fno-omit-frame-pointer",
    .syntax = .flag,
    .zig_equivalent = .no_omit_frame_pointer,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-openmp"),
flagpd1("fno-openmp-assume-teams-oversubscription"),
flagpd1("fno-openmp-assume-threads-oversubscription"),
flagpd1("fno-openmp-cuda-force-full-runtime"),
flagpd1("fno-openmp-cuda-mode"),
flagpd1("fno-openmp-extensions"),
flagpd1("fno-openmp-implicit-rpath"),
flagpd1("fno-openmp-optimistic-collapse"),
flagpd1("fno-openmp-simd"),
flagpd1("fno-openmp-target-debug"),
flagpd1("fno-openmp-target-new-runtime"),
flagpd1("fno-operator-names"),
flagpd1("fno-optimize-sibling-calls"),
flagpd1("fno-pack-derived"),
flagpd1("fno-pack-struct"),
flagpd1("fno-padding-on-unsigned-fixed-point"),
flagpd1("fno-pascal-strings"),
flagpd1("fno-pch-codegen"),
flagpd1("fno-pch-debuginfo"),
flagpd1("fno-pch-instantiate-templates"),
flagpd1("fno-pch-timestamp"),
flagpd1("fno_pch-validate-input-files-content"),
flagpd1("fno-peel-loops"),
flagpd1("fno-permissive"),
.{
    .name = "fno-pic",
    .syntax = .flag,
    .zig_equivalent = .no_pic,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "fno-pie",
    .syntax = .flag,
    .zig_equivalent = .no_pie,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-plt"),
flagpd1("fno-prebuilt-implicit-modules"),
flagpd1("fno-prefetch-loop-arrays"),
flagpd1("fno-preserve-as-comments"),
flagpd1("fno-printf"),
flagpd1("fno-profile"),
flagpd1("fno-profile-arcs"),
flagpd1("fno-profile-correction"),
flagpd1("fno-profile-generate"),
flagpd1("fno-profile-generate-sampling"),
flagpd1("fno-profile-instr-generate"),
flagpd1("fno-profile-instr-use"),
flagpd1("fno-profile-reusedist"),
flagpd1("fno-profile-sample-accurate"),
flagpd1("fno-profile-sample-use"),
flagpd1("fno-profile-use"),
flagpd1("fno-profile-values"),
flagpd1("fno-protect-parens"),
flagpd1("fno-pseudo-probe-for-profiling"),
flagpd1("fno-range-check"),
flagpd1("fno-real-4-real-10"),
flagpd1("fno-real-4-real-16"),
flagpd1("fno-real-4-real-8"),
flagpd1("fno-real-8-real-10"),
flagpd1("fno-real-8-real-16"),
flagpd1("fno-real-8-real-4"),
flagpd1("fno-realloc-lhs"),
flagpd1("fno-reciprocal-math"),
flagpd1("fno-record-command-line"),
flagpd1("fno-recovery-ast"),
flagpd1("fno-recovery-ast-type"),
flagpd1("fno-recursive"),
flagpd1("fno-reformat"),
flagpd1("fno-register-global-dtors-with-atexit"),
flagpd1("fno-regs-graph"),
flagpd1("fno-relaxed-template-template-args"),
flagpd1("fno-rename-registers"),
flagpd1("fno-reorder-blocks"),
flagpd1("fno-repack-arrays"),
flagpd1("fno-reroll-loops"),
flagpd1("fno-rewrite-imports"),
flagpd1("fno-rewrite-includes"),
flagpd1("fno-ripa"),
flagpd1("fno-ropi"),
flagpd1("fno-rounding-math"),
flagpd1("fno-rtlib-add-rpath"),
flagpd1("fno-rtti"),
flagpd1("fno-rtti-data"),
flagpd1("fno-rwpi"),
flagpd1("fno-sanitize-address-outline-instrumentation"),
flagpd1("fno-sanitize-address-poison-custom-array-cookie"),
flagpd1("fno-sanitize-address-use-after-scope"),
flagpd1("fno-sanitize-address-use-odr-indicator"),
flagpd1("fno-sanitize-cfi-canonical-jump-tables"),
flagpd1("fno-sanitize-cfi-cross-dso"),
flagpd1("fno-sanitize-hwaddress-experimental-aliasing"),
flagpd1("fno-sanitize-ignorelist"),
flagpd1("fno-sanitize-link-c++-runtime"),
flagpd1("fno-sanitize-link-runtime"),
flagpd1("fno-sanitize-memory-param-retval"),
flagpd1("fno-sanitize-memory-track-origins"),
flagpd1("fno-sanitize-memory-use-after-dtor"),
flagpd1("fno-sanitize-minimal-runtime"),
flagpd1("fno-sanitize-recover"),
flagpd1("fno-sanitize-stats"),
flagpd1("fno-sanitize-thread-atomics"),
flagpd1("fno-sanitize-thread-func-entry-exit"),
flagpd1("fno-sanitize-thread-memory-access"),
flagpd1("fno-sanitize-trap"),
flagpd1("fno-sanitize-undefined-trap-on-error"),
flagpd1("fno-save-optimization-record"),
flagpd1("fno-schedule-insns"),
flagpd1("fno-schedule-insns2"),
flagpd1("fno-second-underscore"),
flagpd1("fno-see"),
flagpd1("fno-semantic-interposition"),
flagpd1("fno-short-enums"),
flagpd1("fno-short-wchar"),
flagpd1("fno-show-column"),
flagpd1("fno-show-source-location"),
flagpd1("fno-sign-zero"),
flagpd1("fno-signaling-math"),
flagpd1("fno-signaling-nans"),
flagpd1("fno-signed-char"),
flagpd1("fno-signed-wchar"),
flagpd1("fno-signed-zeros"),
flagpd1("fno-single-precision-constant"),
flagpd1("fno-sized-deallocation"),
flagpd1("fno-slp-vectorize"),
flagpd1("fno-spec-constr-count"),
flagpd1("fno-spell-checking"),
flagpd1("fno-split-dwarf-inlining"),
flagpd1("fno-split-lto-unit"),
flagpd1("fno-split-machine-functions"),
flagpd1("fno-split-stack"),
flagpd1("fno-stack-arrays"),
.{
    .name = "fno-stack-check",
    .syntax = .flag,
    .zig_equivalent = .no_stack_check,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-stack-clash-protection"),
flagpd1("fno-stack-protector"),
flagpd1("fno-stack-size-section"),
flagpd1("fno-standalone-debug"),
flagpd1("fno-strength-reduce"),
flagpd1("fno-strict-aliasing"),
flagpd1("fno-strict-enums"),
flagpd1("fno-strict-float-cast-overflow"),
flagpd1("fno-strict-overflow"),
flagpd1("fno-strict-return"),
flagpd1("fno-strict-vtable-pointers"),
flagpd1("fno-struct-path-tbaa"),
flagpd1("fno-sycl"),
flagpd1("fno-temp-file"),
flagpd1("fno-test-coverage"),
flagpd1("fno-threadsafe-statics"),
flagpd1("fno-tls-model"),
flagpd1("fno-tracer"),
flagpd1("fno-trapping-math"),
flagpd1("fno-tree-dce"),
flagpd1("fno-tree-salias"),
flagpd1("fno-tree-ter"),
flagpd1("fno-tree-vectorizer-verbose"),
flagpd1("fno-tree-vrp"),
flagpd1("fno-trigraphs"),
flagpd1("fno-underscoring"),
flagpd1("fno-unique-basic-block-section-names"),
flagpd1("fno-unique-internal-linkage-names"),
flagpd1("fno-unique-section-names"),
flagpd1("fno-unit-at-a-time"),
flagpd1("fno-unroll-all-loops"),
flagpd1("fno-unroll-loops"),
flagpd1("fno-unsafe-loop-optimizations"),
flagpd1("fno-unsafe-math-optimizations"),
flagpd1("fno-unsigned-char"),
flagpd1("fno-unswitch-loops"),
.{
    .name = "fno-unwind-tables",
    .syntax = .flag,
    .zig_equivalent = .no_unwind_tables,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fno-use-ctor-homing"),
flagpd1("fno-use-cxa-atexit"),
flagpd1("fno-use-init-array"),
flagpd1("fno-use-line-directives"),
flagpd1("fno-use-linker-plugin"),
flagpd1("fno-validate-pch"),
flagpd1("fno-var-tracking"),
flagpd1("fno-variable-expansion-in-unroller"),
flagpd1("fno-vect-cost-model"),
flagpd1("fno-vectorize"),
flagpd1("fno-verbose-asm"),
flagpd1("fno-virtual-function-elimination"),
flagpd1("fno-visibility-from-dllstorageclass"),
flagpd1("fno-visibility-inlines-hidden"),
flagpd1("fno-visibility-inlines-hidden-static-local-var"),
flagpd1("fno-wchar"),
flagpd1("fno-web"),
flagpd1("fno-whole-file"),
flagpd1("fno-whole-program"),
flagpd1("fno-whole-program-vtables"),
flagpd1("fno-working-directory"),
flagpd1("fno-wrapv"),
flagpd1("fno-xl-pragma-pack"),
flagpd1("fno-xor-operator"),
flagpd1("fno-xray-always-emit-customevents"),
flagpd1("fno-xray-always-emit-typedevents"),
flagpd1("fno-xray-function-index"),
flagpd1("fno-xray-ignore-loops"),
flagpd1("fno-xray-instrument"),
flagpd1("fno-zero-initialized-in-bss"),
flagpd1("fno-zvector"),
flagpd1("fnon-call-exceptions"),
flagpd1("fnoopenmp-relocatable-target"),
flagpd1("fnoopenmp-use-tls"),
flagpd1("fnoxray-link-deps"),
flagpd1("fobjc-arc"),
flagpd1("fobjc-arc-exceptions"),
flagpd1("fobjc-atdefs"),
flagpd1("fobjc-avoid-heapify-local-blocks"),
flagpd1("fobjc-call-cxx-cdtors"),
flagpd1("fobjc-convert-messages-to-runtime-calls"),
flagpd1("fobjc-disable-direct-methods-for-testing"),
flagpd1("fobjc-encode-cxx-class-template-spec"),
flagpd1("fobjc-exceptions"),
flagpd1("fobjc-gc"),
flagpd1("fobjc-gc-only"),
flagpd1("fobjc-infer-related-result-type"),
flagpd1("fobjc-legacy-dispatch"),
flagpd1("fobjc-link-runtime"),
flagpd1("fobjc-new-property"),
flagpd1("fobjc-nonfragile-abi"),
flagpd1("fobjc-runtime-has-weak"),
flagpd1("fobjc-sender-dependent-dispatch"),
flagpd1("fobjc-subscripting-legacy-runtime"),
flagpd1("fobjc-weak"),
flagpd1("foffload-lto"),
.{
    .name = "fomit-frame-pointer",
    .syntax = .flag,
    .zig_equivalent = .omit_frame_pointer,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fopenacc"),
flagpd1("fopenmp"),
flagpd1("fopenmp-assume-teams-oversubscription"),
flagpd1("fopenmp-assume-threads-oversubscription"),
flagpd1("fopenmp-cuda-force-full-runtime"),
flagpd1("fopenmp-cuda-mode"),
flagpd1("fopenmp-enable-irbuilder"),
flagpd1("fopenmp-extensions"),
sepd1("fopenmp-host-ir-file-path"),
flagpd1("fopenmp-implicit-rpath"),
flagpd1("fopenmp-is-device"),
flagpd1("fopenmp-new-driver"),
flagpd1("fopenmp-optimistic-collapse"),
flagpd1("fopenmp-relocatable-target"),
flagpd1("fopenmp-simd"),
flagpd1("fopenmp-target-debug"),
flagpd1("fopenmp-target-new-runtime"),
flagpd1("fopenmp-use-tls"),
sepd1("foperator-arrow-depth"),
flagpd1("foperator-names"),
flagpd1("foptimize-sibling-calls"),
flagpd1("force_cpusubtype_ALL"),
flagpd1("force_flat_namespace"),
sepd1("force_load"),
flagpd1("forder-file-instrumentation"),
flagpd1("fpack-derived"),
flagpd1("fpack-struct"),
flagpd1("fpadding-on-unsigned-fixed-point"),
flagpd1("fparse-all-comments"),
flagpd1("fpascal-strings"),
flagpd1("fpass-by-value-is-noalias"),
flagpd1("fpcc-struct-return"),
flagpd1("fpch-codegen"),
flagpd1("fpch-debuginfo"),
flagpd1("fpch-instantiate-templates"),
flagpd1("fpch-preprocess"),
flagpd1("fpch-validate-input-files-content"),
flagpd1("fpeel-loops"),
flagpd1("fpermissive"),
.{
    .name = "fpic",
    .syntax = .flag,
    .zig_equivalent = .pic,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "fpie",
    .syntax = .flag,
    .zig_equivalent = .pie,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fplt"),
flagpd1("fprebuilt-implicit-modules"),
flagpd1("fprefetch-loop-arrays"),
flagpd1("fpreserve-as-comments"),
flagpd1("fpreserve-vec3-type"),
flagpd1("fprintf"),
flagpd1("fprofile"),
flagpd1("fprofile-arcs"),
flagpd1("fprofile-correction"),
flagpd1("fprofile-generate"),
flagpd1("fprofile-generate-sampling"),
flagpd1("fprofile-instr-generate"),
flagpd1("fprofile-instr-use"),
flagpd1("fprofile-reusedist"),
flagpd1("fprofile-sample-accurate"),
flagpd1("fprofile-sample-use"),
flagpd1("fprofile-use"),
flagpd1("fprofile-values"),
flagpd1("fprotect-parens"),
flagpd1("fpseudo-probe-for-profiling"),
.{
    .name = "framework",
    .syntax = .separate,
    .zig_equivalent = .framework,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("frange-check"),
flagpd1("freal-4-real-10"),
flagpd1("freal-4-real-16"),
flagpd1("freal-4-real-8"),
flagpd1("freal-8-real-10"),
flagpd1("freal-8-real-16"),
flagpd1("freal-8-real-4"),
flagpd1("frealloc-lhs"),
flagpd1("freciprocal-math"),
flagpd1("frecord-command-line"),
flagpd1("frecovery-ast"),
flagpd1("frecovery-ast-type"),
flagpd1("frecursive"),
flagpd1("freg-struct-return"),
flagpd1("fregister-global-dtors-with-atexit"),
flagpd1("fregs-graph"),
flagpd1("frelaxed-template-template-args"),
flagpd1("frename-registers"),
flagpd1("freorder-blocks"),
flagpd1("frepack-arrays"),
flagpd1("freroll-loops"),
flagpd1("fretain-comments-from-system-headers"),
flagpd1("frewrite-imports"),
flagpd1("frewrite-includes"),
flagpd1("fripa"),
flagpd1("fropi"),
flagpd1("frounding-math"),
flagpd1("frtlib-add-rpath"),
flagpd1("frtti"),
flagpd1("frtti-data"),
flagpd1("frwpi"),
flagpd1("fsanitize-address-globals-dead-stripping"),
flagpd1("fsanitize-address-outline-instrumentation"),
flagpd1("fsanitize-address-poison-custom-array-cookie"),
flagpd1("fsanitize-address-use-after-scope"),
flagpd1("fsanitize-address-use-odr-indicator"),
flagpd1("fsanitize-cfi-canonical-jump-tables"),
flagpd1("fsanitize-cfi-cross-dso"),
flagpd1("fsanitize-cfi-icall-generalize-pointers"),
flagpd1("fsanitize-coverage-8bit-counters"),
flagpd1("fsanitize-coverage-indirect-calls"),
flagpd1("fsanitize-coverage-inline-8bit-counters"),
flagpd1("fsanitize-coverage-inline-bool-flag"),
flagpd1("fsanitize-coverage-no-prune"),
flagpd1("fsanitize-coverage-pc-table"),
flagpd1("fsanitize-coverage-stack-depth"),
flagpd1("fsanitize-coverage-trace-bb"),
flagpd1("fsanitize-coverage-trace-cmp"),
flagpd1("fsanitize-coverage-trace-div"),
flagpd1("fsanitize-coverage-trace-gep"),
flagpd1("fsanitize-coverage-trace-loads"),
flagpd1("fsanitize-coverage-trace-pc"),
flagpd1("fsanitize-coverage-trace-pc-guard"),
flagpd1("fsanitize-coverage-trace-stores"),
flagpd1("fsanitize-hwaddress-experimental-aliasing"),
flagpd1("fsanitize-link-c++-runtime"),
flagpd1("fsanitize-link-runtime"),
flagpd1("fsanitize-memory-param-retval"),
flagpd1("fsanitize-memory-track-origins"),
flagpd1("fsanitize-memory-use-after-dtor"),
flagpd1("fsanitize-minimal-runtime"),
flagpd1("fsanitize-recover"),
flagpd1("fsanitize-stats"),
flagpd1("fsanitize-thread-atomics"),
flagpd1("fsanitize-thread-func-entry-exit"),
flagpd1("fsanitize-thread-memory-access"),
flagpd1("fsanitize-trap"),
flagpd1("fsanitize-undefined-trap-on-error"),
flagpd1("fsave-optimization-record"),
flagpd1("fschedule-insns"),
flagpd1("fschedule-insns2"),
flagpd1("fsecond-underscore"),
flagpd1("fsee"),
flagpd1("fseh-exceptions"),
flagpd1("fsemantic-interposition"),
flagpd1("fshort-enums"),
flagpd1("fshort-wchar"),
flagpd1("fshow-column"),
flagpd1("fshow-skipped-includes"),
flagpd1("fshow-source-location"),
flagpd1("fsign-zero"),
flagpd1("fsignaling-math"),
flagpd1("fsignaling-nans"),
flagpd1("fsigned-bitfields"),
flagpd1("fsigned-char"),
flagpd1("fsigned-wchar"),
flagpd1("fsigned-zeros"),
flagpd1("fsingle-precision-constant"),
flagpd1("fsized-deallocation"),
flagpd1("fsjlj-exceptions"),
flagpd1("fslp-vectorize"),
flagpd1("fspec-constr-count"),
flagpd1("fspell-checking"),
sepd1("fspell-checking-limit"),
flagpd1("fsplit-dwarf-inlining"),
flagpd1("fsplit-lto-unit"),
flagpd1("fsplit-machine-functions"),
flagpd1("fsplit-stack"),
flagpd1("fstack-arrays"),
.{
    .name = "fstack-check",
    .syntax = .flag,
    .zig_equivalent = .stack_check,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fstack-clash-protection"),
flagpd1("fstack-protector"),
flagpd1("fstack-protector-all"),
flagpd1("fstack-protector-strong"),
flagpd1("fstack-size-section"),
flagpd1("fstack-usage"),
flagpd1("fstandalone-debug"),
flagpd1("fstrength-reduce"),
flagpd1("fstrict-aliasing"),
flagpd1("fstrict-enums"),
flagpd1("fstrict-float-cast-overflow"),
flagpd1("fstrict-overflow"),
flagpd1("fstrict-return"),
flagpd1("fstrict-vtable-pointers"),
flagpd1("fstruct-path-tbaa"),
flagpd1("fsycl"),
flagpd1("fsycl-is-device"),
flagpd1("fsycl-is-host"),
flagpd1("fsyntax-only"),
flagpd1("fsystem-module"),
sepd1("ftabstop"),
sepd1("ftemplate-backtrace-limit"),
sepd1("ftemplate-depth"),
flagpd1("ftest-coverage"),
flagpd1("fthreadsafe-statics"),
flagpd1("ftime-report"),
flagpd1("ftime-trace"),
flagpd1("ftls-model"),
flagpd1("ftracer"),
flagpd1("ftrapping-math"),
flagpd1("ftrapv"),
sepd1("ftrapv-handler"),
flagpd1("ftree-dce"),
flagpd1("ftree-salias"),
flagpd1("ftree-ter"),
flagpd1("ftree-vectorizer-verbose"),
flagpd1("ftree-vrp"),
flagpd1("ftrigraphs"),
sepd1("ftype-visibility"),
sepd1("function-alignment"),
flagpd1("funderscoring"),
flagpd1("funique-basic-block-section-names"),
flagpd1("funique-internal-linkage-names"),
flagpd1("funique-section-names"),
flagpd1("funit-at-a-time"),
flagpd1("funknown-anytype"),
flagpd1("funroll-all-loops"),
flagpd1("funroll-loops"),
flagpd1("funsafe-loop-optimizations"),
flagpd1("funsafe-math-optimizations"),
flagpd1("funsigned-bitfields"),
flagpd1("funsigned-char"),
flagpd1("funswitch-loops"),
.{
    .name = "funwind-tables",
    .syntax = .flag,
    .zig_equivalent = .unwind_tables,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("fuse-ctor-homing"),
flagpd1("fuse-cxa-atexit"),
flagpd1("fuse-init-array"),
flagpd1("fuse-line-directives"),
flagpd1("fuse-linker-plugin"),
flagpd1("fuse-register-sized-bitfield-access"),
flagpd1("fvalidate-ast-input-files-content"),
flagpd1("fvariable-expansion-in-unroller"),
flagpd1("fvect-cost-model"),
flagpd1("fvectorize"),
flagpd1("fverbose-asm"),
flagpd1("fverify-debuginfo-preserve"),
flagpd1("fvirtual-function-elimination"),
sepd1("fvisibility"),
flagpd1("fvisibility-from-dllstorageclass"),
flagpd1("fvisibility-global-new-delete-hidden"),
flagpd1("fvisibility-inlines-hidden"),
flagpd1("fvisibility-inlines-hidden-static-local-var"),
flagpd1("fvisibility-ms-compat"),
flagpd1("fwasm-exceptions"),
flagpd1("fweb"),
flagpd1("fwhole-file"),
flagpd1("fwhole-program"),
flagpd1("fwhole-program-vtables"),
flagpd1("fwrapv"),
flagpd1("fwritable-strings"),
flagpd1("fxl-pragma-pack"),
flagpd1("fxor-operator"),
flagpd1("fxray-always-emit-customevents"),
flagpd1("fxray-always-emit-typedevents"),
flagpd1("fxray-function-index"),
flagpd1("fxray-ignore-loops"),
flagpd1("fxray-instrument"),
flagpd1("fxray-link-deps"),
flagpd1("fzero-initialized-in-bss"),
flagpd1("fzvector"),
flagpd1("g0"),
.{
    .name = "g1",
    .syntax = .flag,
    .zig_equivalent = .debug,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("g2"),
flagpd1("g3"),
.{
    .name = "g",
    .syntax = .flag,
    .zig_equivalent = .debug,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("gcodeview"),
flagpd1("gcodeview-ghash"),
flagpd1("gcolumn-info"),
flagpd1("gdbx"),
flagpd1("gdwarf"),
flagpd1("gdwarf32"),
flagpd1("gdwarf64"),
flagpd1("gdwarf-2"),
flagpd1("gdwarf-3"),
flagpd1("gdwarf-4"),
flagpd1("gdwarf-5"),
flagpd1("gdwarf-aranges"),
flagpd1("gembed-source"),
sepd1("gen-cdb-fragment-path"),
flagpd1("gen-reproducer"),
flagpd1("gfull"),
flagpd1("ggdb"),
flagpd1("ggdb0"),
flagpd1("ggdb1"),
flagpd1("ggdb2"),
flagpd1("ggdb3"),
flagpd1("ggnu-pubnames"),
flagpd1("ginline-line-tables"),
flagpd1("gline-directives-only"),
.{
    .name = "gline-tables-only",
    .syntax = .flag,
    .zig_equivalent = .debug,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("glldb"),
flagpd1("gmlt"),
flagpd1("gmodules"),
flagpd1("gno-codeview-ghash"),
flagpd1("gno-column-info"),
flagpd1("gno-embed-source"),
flagpd1("gno-gnu-pubnames"),
flagpd1("gno-inline-line-tables"),
flagpd1("gno-pubnames"),
flagpd1("gno-record-command-line"),
flagpd1("gno-simple-template-names"),
flagpd1("gno-split-dwarf"),
flagpd1("gno-strict-dwarf"),
.{
    .name = "gpu-bundle-output",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "gpu-use-aux-triple-only",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("gpubnames"),
flagpd1("grecord-command-line"),
flagpd1("gsce"),
flagpd1("gsimple-template-names"),
flagpd1("gsplit-dwarf"),
flagpd1("gstrict-dwarf"),
flagpd1("gtoggle"),
flagpd1("gused"),
flagpd1("gz"),
sepd1("header-include-file"),
.{
    .name = "help",
    .syntax = .flag,
    .zig_equivalent = .driver_punt,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "hip-link",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("ibuiltininc"),
sepd1("image_base"),
sepd1("imultilib"),
sepd1("include-pch"),
flagpd1("index-header-map"),
sepd1("init"),
flagpd1("init-only"),
sepd1("install_name"),
flagpd1("keep_private_externs"),
sepd1("lazy_framework"),
sepd1("lazy_library"),
sepd1("load"),
flagpd1("m16"),
flagpd1("m32"),
m("m3dnow"),
m("m3dnowa"),
flagpd1("m64"),
flagpd1("m68000"),
flagpd1("m68010"),
flagpd1("m68020"),
flagpd1("m68030"),
flagpd1("m68040"),
flagpd1("m68060"),
flagpd1("m80387"),
m("mseses"),
flagpd1("mabi=ieeelongdouble"),
flagpd1("mabi=vec-default"),
flagpd1("mabi=vec-extabi"),
flagpd1("mabicalls"),
m("madx"),
m("maes"),
sepd1("main-file-name"),
flagpd1("maix-struct-return"),
flagpd1("malign-double"),
m("maltivec"),
flagpd1("mamdgpu-ieee"),
m("mamx-bf16"),
m("mamx-tile"),
flagpd1("marm"),
flagpd1("massembler-fatal-warnings"),
flagpd1("massembler-no-warn"),
m("matomics"),
m("mavx"),
m("mavx2"),
m("mavx512bf16"),
m("mavx512bitalg"),
m("mavx512bw"),
m("mavx512cd"),
m("mavx512dq"),
m("mavx512er"),
m("mavx512f"),
m("mavx512fp16"),
m("mavx512ifma"),
m("mavx512pf"),
m("mavx512vbmi"),
m("mavx512vbmi2"),
m("mavx512vl"),
m("mavx512vnni"),
m("mavx512vp2intersect"),
m("mavx512vpopcntdq"),
m("mavxvnni"),
flagpd1("mbackchain"),
flagpd1("mbig-endian"),
m("mbmi"),
m("mbmi2"),
flagpd1("mbranch-likely"),
flagpd1("mbranch-target-enforce"),
flagpd1("mbranches-within-32B-boundaries"),
m("mbulk-memory"),
flagpd1("mcheck-zero-division"),
m("mcldemote"),
m("mclflushopt"),
m("mclwb"),
m("mclzero"),
flagpd1("mcmodel=medany"),
flagpd1("mcmodel=medlow"),
m("mcmpb"),
flagpd1("mcmse"),
flagpd1("mcode-object-v3"),
flagpd1("mconstant-cfstrings"),
flagpd1("mconstructor-aliases"),
flagpd1("mcpu=?"),
m("mcrbits"),
m("mcrc"),
m("mcrc32"),
m("mcumode"),
m("mcx16"),
sepd1("mdebug-pass"),
m("mdirect-move"),
flagpd1("mdisable-tail-calls"),
flagpd1("mdouble-float"),
m("mdsp"),
m("mdspr2"),
sepd1("meabi"),
m("mefpu2"),
flagpd1("membedded-data"),
flagpd1("menable-experimental-extensions"),
flagpd1("menable-no-infs"),
flagpd1("menable-no-nans"),
flagpd1("menable-unsafe-fp-math"),
m("menqcmd"),
m("mexception-handling"),
m("mexecute-only"),
flagpd1("mextern-sdata"),
m("mf16c"),
flagpd1("mfancy-math-387"),
flagpd1("mfentry"),
flagpd1("mfix4300"),
flagpd1("mfix-and-continue"),
m("mfix-cmse-cve-2021-35465"),
m("mfix-cortex-a53-835769"),
m("mfloat128"),
sepd1("mfloat-abi"),
m("mfma"),
m("mfma4"),
flagpd1("mfp32"),
m("mfp64"),
sepd1("mfpmath"),
m("mfprnd"),
m("mfpxx"),
m("mfsgsbase"),
m("mfxsr"),
flagpd1("mgeneral-regs-only"),
m("mgfni"),
m("mginv"),
flagpd1("mglibc"),
flagpd1("mglobal-merge"),
flagpd1("mgpopt"),
m("mhard-float"),
m("mhvx"),
m("mhvx-ieee-fp"),
m("mhvx-qfloat"),
m("mhreset"),
m("mhtm"),
flagpd1("miamcu"),
flagpd1("mibt-seal"),
flagpd1("mieee-fp"),
flagpd1("mieee-rnd-near"),
flagpd1("mignore-xcoff-visibility"),
flagpd1("migrate"),
flagpd1("no-finalize-removal"),
flagpd1("no-ns-alloc-error"),
flagpd1("mimplicit-float"),
flagpd1("mincremental-linker-compatible"),
flagpd1("minline-all-stringops"),
m("minvariant-function-descriptors"),
m("minvpcid"),
flagpd1("mips1"),
flagpd1("mips16"),
flagpd1("mips2"),
flagpd1("mips3"),
flagpd1("mips32"),
flagpd1("mips32r2"),
flagpd1("mips32r3"),
flagpd1("mips32r5"),
flagpd1("mips32r6"),
flagpd1("mips4"),
flagpd1("mips5"),
flagpd1("mips64"),
flagpd1("mips64r2"),
flagpd1("mips64r3"),
flagpd1("mips64r5"),
flagpd1("mips64r6"),
m("misel"),
flagpd1("mkernel"),
m("mkl"),
flagpd1("mldc1-sdc1"),
sepd1("mlimit-float-precision"),
sepd1("mlink-bitcode-file"),
sepd1("mlink-builtin-bitcode"),
sepd1("mlink-cuda-bitcode"),
flagpd1("mlittle-endian"),
sepd1("mllvm"),
flagpd1("mlocal-sdata"),
m("mlong-calls"),
flagpd1("mlong-double-128"),
flagpd1("mlong-double-64"),
flagpd1("mlong-double-80"),
m("mlongcall"),
m("mlvi-cfi"),
flagpd1("mlvi-hardening"),
m("mlwp"),
m("mlzcnt"),
flagpd1("mmadd4"),
flagpd1("mmark-bti-property"),
m("mmemops"),
flagpd1("mmfcrf"),
m("mmfocrf"),
m("mmicromips"),
m("mmma"),
m("mmmx"),
m("mmovbe"),
m("mmovdir64b"),
m("mmovdiri"),
flagpd1("mmpx"),
flagpd1("mms-bitfields"),
m("mmsa"),
m("mmt"),
m("mmultivalue"),
m("mmutable-globals"),
m("mmwaitx"),
m("mno-3dnow"),
m("mno-3dnowa"),
flagpd1("mno-80387"),
flagpd1("mno-abicalls"),
m("mno-adx"),
m("mno-aes"),
m("mno-altivec"),
flagpd1("mno-amdgpu-ieee"),
m("mno-amx-bf16"),
m("mno-amx-int8"),
m("mno-amx-tile"),
m("mno-atomics"),
m("mno-avx"),
m("mno-avx2"),
m("mno-avx512bf16"),
m("mno-avx512bitalg"),
m("mno-avx512bw"),
m("mno-avx512cd"),
m("mno-avx512dq"),
m("mno-avx512er"),
m("mno-avx512f"),
m("mno-avx512fp16"),
m("mno-avx512ifma"),
m("mno-avx512pf"),
m("mno-avx512vbmi"),
m("mno-avx512vbmi2"),
m("mno-avx512vl"),
m("mno-avx512vnni"),
m("mno-avx512vp2intersect"),
m("mno-avx512vpopcntdq"),
m("mno-avxvnni"),
flagpd1("mno-backchain"),
m("mno-bmi"),
m("mno-bmi2"),
flagpd1("mno-branch-likely"),
m("mno-bti-at-return-twice"),
m("mno-bulk-memory"),
flagpd1("mno-check-zero-division"),
m("mno-cldemote"),
m("mno-clflushopt"),
m("mno-clwb"),
m("mno-clzero"),
m("mno-cmpb"),
flagpd1("mno-code-object-v3"),
flagpd1("mno-constant-cfstrings"),
flagpd1("mno-constructor-aliases"),
m("mno-crbits"),
m("mno-crc"),
m("mno-crc32"),
m("mno-cumode"),
m("mno-cx16"),
m("mno-dsp"),
m("mno-dspr2"),
flagpd1("mno-embedded-data"),
m("mno-enqcmd"),
m("mno-exception-handling"),
flagpd1("mnoexecstack"),
m("mno-execute-only"),
flagpd1("mno-extern-sdata"),
m("mno-f16c"),
m("mno-fix-cmse-cve-2021-35465"),
m("mno-fix-cortex-a53-835769"),
m("mno-float128"),
m("mno-fma"),
m("mno-fma4"),
flagpd1("mno-fp-ret-in-387"),
m("mno-fprnd"),
m("mno-fsgsbase"),
m("mno-fxsr"),
m("mno-gfni"),
m("mno-ginv"),
flagpd1("mno-global-merge"),
flagpd1("mno-gpopt"),
m("mno-hvx"),
m("mno-hvx-ieee-fp"),
m("mno-hvx-qfloat"),
m("mno-hreset"),
m("mno-htm"),
flagpd1("mno-iamcu"),
flagpd1("mno-implicit-float"),
flagpd1("mno-incremental-linker-compatible"),
flagpd1("mno-inline-all-stringops"),
m("mno-invariant-function-descriptors"),
m("mno-invpcid"),
m("mno-isel"),
m("mno-kl"),
flagpd1("mno-ldc1-sdc1"),
flagpd1("mno-local-sdata"),
m("mno-long-calls"),
m("mno-longcall"),
m("mno-lvi-cfi"),
flagpd1("mno-lvi-hardening"),
m("mno-lwp"),
m("mno-lzcnt"),
flagpd1("mno-madd4"),
m("mno-memops"),
flagpd1("mno-mfcrf"),
m("mno-mfocrf"),
m("mno-micromips"),
m("mno-mips16"),
m("mno-mma"),
m("mno-mmx"),
m("mno-movbe"),
m("mno-movdir64b"),
m("mno-movdiri"),
m("mno-movt"),
flagpd1("mno-mpx"),
flagpd1("mno-ms-bitfields"),
m("mno-msa"),
m("mno-mt"),
m("mno-multivalue"),
m("mno-mutable-globals"),
m("mno-mwaitx"),
m("mno-neg-immediates"),
m("mno-nontrapping-fptoint"),
m("mno-nvj"),
m("mno-nvs"),
flagpd1("mno-odd-spreg"),
flagpd1("mno-omit-leaf-frame-pointer"),
flagpd1("mno-outline"),
m("mno-outline-atomics"),
flagpd1("mno-packed-stack"),
m("mno-packets"),
flagpd1("mno-pascal-strings"),
m("mno-pclmul"),
m("mno-pconfig"),
flagpd1("mno-pcrel"),
m("mno-pku"),
m("mno-popcnt"),
m("mno-popcntd"),
m("mno-power10-vector"),
m("mno-power8-vector"),
m("mno-power9-vector"),
m("mno-prefetchwt1"),
flagpd1("mno-prefixed"),
m("mno-prfchw"),
m("mno-ptwrite"),
flagpd1("mno-pure-code"),
m("mno-rdpid"),
m("mno-rdrnd"),
m("mno-rdseed"),
.{
    .name = "mno-red-zone",
    .syntax = .flag,
    .zig_equivalent = .no_red_zone,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
m("mno-reference-types"),
m("mno-relax"),
flagpd1("mno-relax-all"),
flagpd1("mno-relax-pic-calls"),
m("mno-relaxed-simd"),
flagpd1("mno-restrict-it"),
m("mno-retpoline"),
m("mno-retpoline-external-thunk"),
flagpd1("mno-rtd"),
m("mno-rtm"),
m("mno-sahf"),
m("mno-save-restore"),
m("mno-serialize"),
m("mno-seses"),
m("mno-sgx"),
m("mno-sha"),
m("mno-shstk"),
m("mno-sign-ext"),
m("mno-simd128"),
flagpd1("mno-skip-rax-setup"),
m("mno-soft-float"),
m("mno-spe"),
flagpd1("mno-speculative-load-hardening"),
m("mno-sse"),
m("mno-sse2"),
m("mno-sse3"),
flagpd1("mno-sse4"),
m("mno-sse4.1"),
m("mno-sse4.2"),
m("mno-sse4a"),
m("mno-ssse3"),
flagpd1("mno-stack-arg-probe"),
flagpd1("mno-stackrealign"),
m("mno-tail-call"),
m("mno-tbm"),
m("mno-tgsplit"),
flagpd1("mno-thumb"),
flagpd1("mno-tls-direct-seg-refs"),
m("mno-tsxldtrk"),
m("mno-uintr"),
flagpd1("mno-unaligned-access"),
flagpd1("mno-unsafe-fp-atomics"),
m("mno-vaes"),
m("mno-virt"),
m("mno-vpclmulqdq"),
m("mno-vsx"),
flagpd1("mno-vx"),
m("mno-vzeroupper"),
m("mno-waitpkg"),
flagpd1("mno-warn-nonportable-cfstrings"),
m("mno-wavefrontsize64"),
m("mno-wbnoinvd"),
m("mno-widekl"),
m("mno-x87"),
m("mno-xgot"),
m("mno-xop"),
m("mno-xsave"),
m("mno-xsavec"),
m("mno-xsaveopt"),
m("mno-xsaves"),
flagpd1("mno-zvector"),
flagpd1("mnocrc"),
m("mno-direct-move"),
m("mnontrapping-fptoint"),
flagpd1("mnop-mcount"),
m("mno-paired-vector-memops"),
m("mno-crypto"),
m("mnvj"),
m("mnvs"),
flagpd1("modd-spreg"),
sepd1("module-dependency-dir"),
sepd1("module-dir"),
flagpd1("module-file-deps"),
flagpd1("module-file-info"),
sepd1("module-suffix"),
flagpd1("momit-leaf-frame-pointer"),
flagpd1("moutline"),
m("moutline-atomics"),
flagpd1("mpacked-stack"),
m("mpackets"),
m("mpaired-vector-memops"),
flagpd1("mpascal-strings"),
m("mpclmul"),
m("mpconfig"),
flagpd1("mpcrel"),
m("mpku"),
m("mpopcnt"),
m("mpopcntd"),
m("mpower10-vector"),
m("mcrypto"),
m("mpower8-vector"),
m("mpower9-vector"),
m("mprefetchwt1"),
flagpd1("mprefixed"),
m("mprfchw"),
m("mprivileged"),
m("mptwrite"),
flagpd1("mpure-code"),
flagpd1("mqdsp6-compat"),
m("mrdpid"),
m("mrdrnd"),
m("mrdseed"),
flagpd1("mreassociate"),
flagpd1("mrecip"),
flagpd1("mrecord-mcount"),
.{
    .name = "mred-zone",
    .syntax = .flag,
    .zig_equivalent = .red_zone,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
m("mreference-types"),
sepd1("mregparm"),
m("mrelax"),
flagpd1("mrelax-all"),
flagpd1("mrelax-pic-calls"),
.{
    .name = "mrelax-relocations",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
m("mrelaxed-simd"),
sepd1("mrelocation-model"),
flagpd1("mrestrict-it"),
m("mretpoline"),
m("mretpoline-external-thunk"),
m("mrop-protect"),
flagpd1("mrtd"),
m("mrtm"),
m("msahf"),
m("msave-restore"),
flagpd1("msave-temp-labels"),
m("msecure-plt"),
m("mserialize"),
m("msgx"),
m("msha"),
m("mshstk"),
m("msign-ext"),
flagpd1("msim"),
m("msimd128"),
m("msingle-float"),
flagpd1("mskip-rax-setup"),
sepd1("msmall-data-limit"),
m("msoft-float"),
m("mspe"),
flagpd1("mspeculative-load-hardening"),
m("msse"),
m("msse2"),
m("msse3"),
flagpd1("msse4"),
m("msse4.1"),
m("msse4.2"),
m("msse4a"),
m("mssse3"),
flagpd1("mstack-arg-probe"),
flagpd1("mstackrealign"),
m("mstrict-align"),
flagpd1("msvr4-struct-return"),
sepd1("mt-migrate-directory"),
m("mtail-call"),
m("mamx-int8"),
m("mtbm"),
m("mtgsplit"),
sepd1("mthread-model"),
flagpd1("mthumb"),
flagpd1("mtls-direct-seg-refs"),
sepd1("mtp"),
m("mtsxldtrk"),
flagpd1("mtune=?"),
flagpd1("muclibc"),
m("muintr"),
flagpd1("multi_module"),
sepd1("multiply_defined"),
sepd1("multiply_defined_unused"),
flagpd1("munaligned-access"),
flagpd1("munsafe-fp-atomics"),
m("mv5"),
m("mv55"),
m("mv60"),
m("mv62"),
m("mv65"),
m("mv66"),
m("mv67"),
flagpd1("mv67t"),
m("mv68"),
m("mv69"),
m("mvaes"),
m("mvirt"),
m("mvpclmulqdq"),
m("mvsx"),
flagpd1("mvx"),
m("mvzeroupper"),
m("mwaitpkg"),
flagpd1("mwarn-nonportable-cfstrings"),
m("mwavefrontsize64"),
m("mwbnoinvd"),
m("mwidekl"),
flagpd1("mx32"),
m("mx87"),
m("mxgot"),
m("mxop"),
m("mxsave"),
m("mxsavec"),
m("mxsaveopt"),
m("mxsaves"),
flagpd1("mzvector"),
flagpd1("n"),
flagpd1("new-struct-path-tbaa"),
flagpd1("no_dead_strip_inits_and_terms"),
flagpd1("no-canonical-prefixes"),
flagpd1("no-clear-ast-before-backend"),
flagpd1("no-code-completion-globals"),
flagpd1("no-code-completion-ns-level-decls"),
flagpd1("no-cpp-precomp"),
.{
    .name = "no-cuda-noopt-device-debug",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-cuda-version-check",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("no-emit-llvm-uselists"),
.{
    .name = "no-gpu-bundle-output",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("no-implicit-float"),
.{
    .name = "no-integrated-cpp",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-pedantic",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "no-pie",
    .syntax = .flag,
    .zig_equivalent = .no_pie,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("no-pthread"),
flagpd1("no-round-trip-args"),
flagpd1("no-struct-path-tbaa"),
flagpd1("nobuiltininc"),
flagpd1("nocpp"),
flagpd1("nodefaultlibs"),
flagpd1("nofixprebinding"),
flagpd1("nogpuinc"),
flagpd1("nogpulib"),
flagpd1("nohipwrapperinc"),
.{
    .name = "nolibc",
    .syntax = .flag,
    .zig_equivalent = .nostdlib,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("nomultidefs"),
.{
    .name = "nopie",
    .syntax = .flag,
    .zig_equivalent = .no_pie,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("noprebind"),
flagpd1("noprofilelib"),
flagpd1("noseglinkedit"),
flagpd1("nostartfiles"),
.{
    .name = "nostdinc",
    .syntax = .flag,
    .zig_equivalent = .nostdlibinc,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "nostdinc++",
    .syntax = .flag,
    .zig_equivalent = .nostdlib_cpp,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "nostdlib",
    .syntax = .flag,
    .zig_equivalent = .nostdlib,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "nostdlibinc",
    .syntax = .flag,
    .zig_equivalent = .nostdlibinc,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "nostdlib++",
    .syntax = .flag,
    .zig_equivalent = .nostdlib_cpp,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("nostdsysteminc"),
flagpd1("objcmt-atomic-property"),
flagpd1("objcmt-migrate-all"),
flagpd1("objcmt-migrate-annotation"),
flagpd1("objcmt-migrate-designated-init"),
flagpd1("objcmt-migrate-instancetype"),
flagpd1("objcmt-migrate-literals"),
flagpd1("objcmt-migrate-ns-macros"),
flagpd1("objcmt-migrate-property"),
flagpd1("objcmt-migrate-property-dot-syntax"),
flagpd1("objcmt-migrate-protocol-conformance"),
flagpd1("objcmt-migrate-readonly-property"),
flagpd1("objcmt-migrate-readwrite-property"),
flagpd1("objcmt-migrate-subscripting"),
flagpd1("objcmt-ns-nonatomic-iosonly"),
flagpd1("objcmt-returns-innerpointer-property"),
flagpd1("object"),
sepd1("object-file-name"),
sepd1("opt-record-file"),
sepd1("opt-record-format"),
sepd1("opt-record-passes"),
sepd1("output-asm-variant"),
flagpd1("p"),
.{
    .name = "pass-exit-codes",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("pch-through-hdrstop-create"),
flagpd1("pch-through-hdrstop-use"),
.{
    .name = "pedantic",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "pedantic-errors",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("pg"),
flagpd1("pic-is-pie"),
sepd1("pic-level"),
.{
    .name = "pie",
    .syntax = .flag,
    .zig_equivalent = .pie,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "pipe",
    .syntax = .flag,
    .zig_equivalent = .ignore,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
sepd1("plugin"),
flagpd1("prebind"),
flagpd1("prebind_all_twolevel_modules"),
flagpd1("preload"),
flagpd1("print-dependency-directives-minimized-source"),
.{
    .name = "print-effective-triple",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("print-ivar-layout"),
.{
    .name = "print-libgcc-file-name",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-multi-directory",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-multi-lib",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-multi-os-directory",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-multiarch",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("print-preamble"),
.{
    .name = "print-resource-dir",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-rocm-search-dirs",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-runtime-dir",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-search-dirs",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("print-stats"),
.{
    .name = "print-supported-cpus",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-target-triple",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-targets",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("private_bundle"),
flagpd1("pthread"),
flagpd1("pthreads"),
flagpd1("r"),
.{
    .name = "rdynamic",
    .syntax = .flag,
    .zig_equivalent = .rdynamic,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
sepd1("read_only_relocs"),
sepd1("record-command-line"),
flagpd1("relaxed-aliasing"),
.{
    .name = "relocatable-pch",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("remap"),
sepd1("remap-file"),
sepd1("resource-dir"),
flagpd1("rewrite-legacy-objc"),
flagpd1("rewrite-macros"),
flagpd1("rewrite-objc"),
flagpd1("rewrite-test"),
flagpd1("round-trip-args"),
sepd1("rpath"),
.{
    .name = "s",
    .syntax = .flag,
    .zig_equivalent = .strip,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "save-stats",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "save-temps",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "sectalign",
    .syntax = .{.multi_arg=3},
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "sectcreate",
    .syntax = .{.multi_arg=3},
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "sectobjectsymbols",
    .syntax = .{.multi_arg=2},
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "sectorder",
    .syntax = .{.multi_arg=3},
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
sepd1("seg_addr_table"),
sepd1("seg_addr_table_filename"),
.{
    .name = "segaddr",
    .syntax = .{.multi_arg=2},
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "segcreate",
    .syntax = .{.multi_arg=3},
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("seglinkedit"),
.{
    .name = "segprot",
    .syntax = .{.multi_arg=3},
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
sepd1("segs_read_only_addr"),
sepd1("segs_read_write_addr"),
flagpd1("setup-static-analyzer"),
.{
    .name = "shared",
    .syntax = .flag,
    .zig_equivalent = .shared,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("shared-libgcc"),
flagpd1("shared-libsan"),
flagpd1("show-encoding"),
.{
    .name = "show-includes",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("show-inst"),
flagpd1("single_module"),
.{
    .name = "specs",
    .syntax = .separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
sepd1("split-dwarf-file"),
sepd1("split-dwarf-output"),
sepd1("stack-protector"),
sepd1("stack-protector-buffer-size"),
sepd1("stack-usage-file"),
.{
    .name = "start-no-unused-arguments",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "static",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("static-define"),
flagpd1("static-libgcc"),
flagpd1("static-libgfortran"),
flagpd1("static-libsan"),
flagpd1("static-libstdc++"),
flagpd1("static-openmp"),
flagpd1("static-pie"),
flagpd1("sys-header-deps"),
flagpd1("t"),
sepd1("target-abi"),
sepd1("target-cpu"),
sepd1("target-feature"),
.{
    .name = "target",
    .syntax = .separate,
    .zig_equivalent = .target,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
sepd1("target-linker-version"),
flagpd1("templight-dump"),
flagpd1("test-io"),
flagpd1("time"),
.{
    .name = "traditional",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "traditional-cpp",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "trigraphs",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("trim-egraph"),
sepd1("triple"),
sepd1("tune-cpu"),
flagpd1("twolevel_namespace"),
flagpd1("twolevel_namespace_hints"),
sepd1("umbrella"),
flagpd1("undef"),
sepd1("unexported_symbols_list"),
.{
    .name = "v",
    .syntax = .flag,
    .zig_equivalent = .verbose,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
flagpd1("vectorize-loops"),
flagpd1("vectorize-slp"),
flagpd1("verify"),
.{
    .name = "verify-debug-info",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
flagpd1("verify-ignore-unexpected"),
flagpd1("verify-pch"),
flagpd1("version"),
.{
    .name = "via-file-asm",
    .syntax = .flag,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
flagpd1("w"),
.{
    .name = "weak_framework",
    .syntax = .separate,
    .zig_equivalent = .weak_framework,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "weak_library",
    .syntax = .separate,
    .zig_equivalent = .weak_library,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
sepd1("weak_reference_mismatches"),
flagpd1("whatsloaded"),
flagpd1("why_load"),
flagpd1("whyload"),
.{
    .name = "z",
    .syntax = .separate,
    .zig_equivalent = .linker_input_z,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fsanitize-undefined-strip-path-components="),
joinpd1("fopenmp-cuda-teams-reduction-recs-num="),
joinpd1("fvisibility-externs-nodllstorageclass="),
joinpd1("analyzer-config-compatibility-mode="),
joinpd1("fsanitize-address-use-after-return="),
.{
    .name = "fsanitize-address-use-after-return",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
joinpd1("ftrivial-auto-var-init-stop-after="),
joinpd1("fverify-debuginfo-preserve-export="),
joinpd1("fpatchable-function-entry-offset="),
joinpd1("analyzer-inline-max-stack-depth="),
joinpd1("fsanitize-address-field-padding="),
.{
    .name = "fno-sanitize-address-vcasan-lib",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
joinpd1("fdiagnostics-hotness-threshold="),
joinpd1("fsanitize-memory-track-origins="),
joinpd1("mwatchos-simulator-version-min="),
joinpd1("fsanitize-coverage-ignorelist="),
joinpd1("fvisibility-externs-dllimport="),
joinpd1("fvisibility-nodllstorageclass="),
joinpd1("fxray-selected-function-group="),
joinpd1("mappletvsimulator-version-min="),
joinpd1("mstack-protector-guard-offset="),
.{
    .name = "sourceDependencies:directives",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
joinpd1("fsanitize-coverage-whitelist="),
joinpd1("fsanitize-coverage-blacklist="),
joinpd1("fobjc-nonfragile-abi-version="),
joinpd1("fprofile-instrument-use-path="),
joinpd1("fsanitize-coverage-allowlist="),
jspd1("fxray-instrumentation-bundle="),
joinpd1("miphonesimulator-version-min="),
joinpd1("fsanitize-address-destructor="),
joinpd1("faddress-space-map-mangling="),
joinpd1("foptimization-record-passes="),
joinpd1("fsanitize-system-ignorelist="),
joinpd1("ftest-module-file-extension="),
jspd1("fxray-instruction-threshold="),
.{
    .name = "libomptarget-amdgcn-bc-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("mno-default-build-attributes"),
joinpd1("mtvos-simulator-version-min="),
joinpd1("mwatchsimulator-version-min="),
.{
    .name = "include-with-prefix-before=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("objcmt-white-list-dir-path="),
joinpd1("fsanitize-system-blacklist="),
joinpd1("error-on-deserialized-decl="),
joinpd1("fconstexpr-backtrace-limit="),
joinpd1("fdiagnostics-show-category="),
joinpd1("fdiagnostics-show-location="),
joinpd1("fopenmp-cuda-blocks-per-sm="),
jspd1("fxray-instruction-threshold"),
.{
    .name = "headerpad_max_install_names",
    .syntax = .joined,
    .zig_equivalent = .headerpad_max_install_names,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "libomptarget-nvptx-bc-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("mios-simulator-version-min="),
joinpd1("mstack-protector-guard-reg="),
.{
    .name = "include-with-prefix-after=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("objcmt-whitelist-dir-path="),
joinpd1("fcoverage-compilation-dir="),
joinpd1("fms-compatibility-version="),
joinpd1("fopenmp-cuda-number-of-sm="),
joinpd1("foptimization-record-file="),
joinpd1("fpatchable-function-entry="),
joinpd1("fsave-optimization-record="),
joinpd1("ftemplate-backtrace-limit="),
.{
    .name = "gpu-max-threads-per-block=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("objcmt-allowlist-dir-path="),
joinpd1("Wno-nonportable-cfstrings"),
joinpd1("analyzer-disable-checker="),
joinpd1("fbuild-session-timestamp="),
joinpd1("fprofile-instrument-path="),
joinpd1("mdefault-build-attributes"),
joinpd1("msign-return-address-key="),
.{
    .name = "verify-ignore-unexpected=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "include-directory-after=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "compress-debug-sections=",
    .syntax = .joined,
    .zig_equivalent = .compress_debug_sections,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "fcomment-block-commands=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("flax-vector-conversions="),
joinpd1("fmodules-embed-all-files"),
joinpd1("fmodules-prune-interval="),
joinpd1("foverride-record-layout="),
joinpd1("fprofile-instr-generate="),
joinpd1("fprofile-remapping-file="),
joinpd1("fsanitize-coverage-type="),
joinpd1("fsanitize-hwaddress-abi="),
joinpd1("ftime-trace-granularity="),
jspd1("fxray-always-instrument="),
jspd1("internal-externc-isystem"),
.{
    .name = "no-system-header-prefix=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "output-class-directory=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("analyzer-inlining-mode="),
joinpd1("fconstant-string-class="),
joinpd1("fcrash-diagnostics-dir="),
joinpd1("fdebug-compilation-dir="),
joinpd1("fdebug-default-version="),
joinpd1("ffp-exception-behavior="),
joinpd1("fmacro-backtrace-limit="),
joinpd1("fmax-array-constructor="),
joinpd1("fprofile-exclude-files="),
joinpd1("ftrivial-auto-var-init="),
jspd1("fxray-never-instrument="),
joinpd1("gsimple-template-names="),
jspd1("interface-stub-version="),
joinpd1("malign-branch-boundary="),
joinpd1("mappletvos-version-min="),
joinpd1("mstack-protector-guard="),
joinpd1("Wnonportable-cfstrings"),
joinpd1("fbasic-block-sections="),
joinpd1("fdefault-calling-conv="),
joinpd1("fdenormal-fp-math-f32="),
joinpd1("fembed-offload-object="),
joinpd1("ffile-compilation-dir="),
joinpd1("fgpu-inline-threshold="),
joinpd1("fmax-subrecord-length="),
joinpd1("fmodules-ignore-macro="),
.{
    .name = "fno-sanitize-coverage=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fobjc-dispatch-method="),
joinpd1("foperator-arrow-depth="),
joinpd1("fprebuilt-module-path="),
joinpd1("fprofile-filter-files="),
joinpd1("fspell-checking-limit="),
joinpd1("fvisibility-dllexport="),
joinpd1("fxray-function-groups="),
joinpd1("miphoneos-version-min="),
joinpd1("msmall-data-threshold="),
joinpd1("Wlarge-by-value-copy="),
joinpd1("analyzer-constraints="),
joinpd1("analyzer-dump-egraph="),
jspd1("compatibility_version"),
jspd1("dylinker_install_name"),
joinpd1("fcoverage-prefix-map="),
joinpd1("fcs-profile-generate="),
joinpd1("fmodules-prune-after="),
.{
    .name = "fno-sanitize-recover=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fopenmp-target-debug="),
joinpd1("fsanitize-ignorelist="),
jspd1("iframeworkwithsysroot"),
joinpd1("mcode-object-version="),
joinpd1("mpad-max-prefix-size="),
joinpd1("mprefer-vector-width="),
joinpd1("msign-return-address="),
joinpd1("mwatchos-version-min="),
.{
    .name = "rocm-device-lib-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "system-header-prefix=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-with-prefix=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("faltivec-src-compat="),
joinpd1("fsanitize-blacklist="),
.{
    .name = "hip-device-lib-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("coverage-notes-file="),
joinpd1("fbuild-session-file="),
joinpd1("fdiagnostics-format="),
joinpd1("fmax-stack-var-size="),
joinpd1("fmodules-cache-path="),
joinpd1("fmodules-embed-file="),
joinpd1("fprofile-instrument="),
joinpd1("fprofile-sample-use="),
joinpd1("mmacosx-version-min="),
.{
    .name = "no-cuda-include-ptx=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("Wframe-larger-than="),
joinpd1("code-completion-at="),
joinpd1("coverage-data-file="),
joinpd1("fblas-matmul-limit="),
joinpd1("fdiagnostics-color="),
joinpd1("ffixed-line-length="),
joinpd1("ffixed-line-length-"),
joinpd1("ffuchsia-api-level="),
joinpd1("flimited-precision="),
joinpd1("fprofile-instr-use="),
.{
    .name = "fsanitize-coverage=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fthin-link-bitcode="),
.{
    .name = "gpu-instrument-lib=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "hipspv-pass-plugin=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("mbranch-protection="),
joinpd1("mmacos-version-min="),
joinpd1("pch-through-header="),
joinpd1("target-sdk-version="),
.{
    .name = "execution-charset:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "sourceDependencies",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "include-directory=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "library-directory=",
    .syntax = .joined,
    .zig_equivalent = .lib_dir,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "config-system-dir=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("fbinutils-version="),
joinpd1("fclang-abi-compat="),
joinpd1("fcompile-resource="),
joinpd1("fdebug-prefix-map="),
joinpd1("fdenormal-fp-math="),
joinpd1("fexcess-precision="),
joinpd1("fextend-arguments="),
joinpd1("ffree-line-length-"),
joinpd1("fmacro-prefix-map="),
.{
    .name = "fno-sanitize-trap=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fobjc-abi-version="),
joinpd1("foutput-class-dir="),
joinpd1("fproc-stat-report="),
joinpd1("fprofile-generate="),
joinpd1("frewrite-map-file="),
.{
    .name = "fsanitize-recover=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fsymbol-partition="),
joinpd1("mcompact-branches="),
joinpd1("msmall-data-limit="),
joinpd1("mstack-probe-size="),
joinpd1("mtvos-version-min="),
joinpd1("working-directory="),
.{
    .name = "amdgpu-arch-tool=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("analyze-function="),
joinpd1("analyzer-checker="),
joinpd1("coverage-version="),
.{
    .name = "cuda-include-ptx=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("falign-functions="),
joinpd1("fconstexpr-depth="),
joinpd1("fconstexpr-steps="),
joinpd1("ffile-prefix-map="),
joinpd1("fmodule-map-file="),
joinpd1("fobjc-arc-cxxlib="),
joinpd1("fproc-stat-report"),
joinpd1("fwarn-stack-size="),
jspd1("iwithprefixbefore"),
joinpd1("malign-functions="),
joinpd1("mios-version-min="),
joinpd1("mstack-alignment="),
joinpd1("msve-vector-bits="),
.{
    .name = "no-cuda-gpu-arch=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("object-file-name="),
jspd1("working-directory"),
.{
    .name = "headerUnit:angle",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "headerUnit:quote",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
joinpd1("analyzer-output="),
joinpd1("ast-dump-filter="),
.{
    .name = "config-user-dir=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("debug-info-kind="),
joinpd1("debugger-tuning="),
joinpd1("exception-model="),
joinpd1("fcf-runtime-abi="),
joinpd1("finit-character="),
joinpd1("fmax-type-align="),
joinpd1("fmemory-profile="),
joinpd1("fmessage-length="),
.{
    .name = "fopenmp-targets=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fopenmp-version="),
joinpd1("fprofile-update="),
joinpd1("fshow-overloads="),
joinpd1("fswift-async-fp="),
joinpd1("ftemplate-depth-"),
joinpd1("ftemplate-depth="),
jspd1("fxray-attr-list="),
jspd1("internal-isystem"),
joinpd1("mlinker-version="),
.{
    .name = "no-offload-arch=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-file-name=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "print-prog-name=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
jspd1("stdlib++-isystem"),
joinpd1("Rpass-analysis="),
.{
    .name = "Xopenmp-target=",
    .syntax = .joined_and_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "source-charset:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "analyzer-output",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include-prefix=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "undefine-macro=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("analyzer-purge="),
joinpd1("analyzer-store="),
jspd1("current_version"),
joinpd1("fbootclasspath="),
joinpd1("fbracket-depth="),
joinpd1("fcf-protection="),
joinpd1("fdepfile-entry="),
joinpd1("fembed-bitcode="),
joinpd1("finput-charset="),
joinpd1("fmodule-format="),
joinpd1("fms-memptr-rep="),
joinpd1("fnew-alignment="),
joinpd1("frecord-marker="),
.{
    .name = "fsanitize-trap=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fthinlto-index="),
joinpd1("ftrap-function="),
joinpd1("ftrapv-handler="),
.{
    .name = "funwind-tables=",
    .syntax = .joined,
    .zig_equivalent = .unwind_tables,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "hip-device-lib=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("mdynamic-no-pic"),
joinpd1("mframe-pointer="),
joinpd1("mindirect-jump="),
joinpd1("preamble-bytes="),
.{
    .name = "Wundef-prefix=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "vctoolsversion",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "bootclasspath=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "cuda-gpu-arch=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "dependent-lib=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("dwarf-version="),
joinpd1("falign-labels="),
joinpd1("fauto-profile="),
joinpd1("fexec-charset="),
joinpd1("fgnuc-version="),
joinpd1("finit-integer="),
joinpd1("finit-logical="),
joinpd1("finline-limit="),
joinpd1("fobjc-runtime="),
joinpd1("fprofile-list="),
.{
    .name = "gcc-toolchain=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "linker-option=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "malign-branch=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
jspd1("objcxx-isystem"),
joinpd1("vtordisp-mode="),
joinpd1("Rpass-missed="),
joinpd1("Wlarger-than-"),
joinpd1("Wlarger-than="),
.{
    .name = "experimental:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "external:env:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "winsdkversion",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "define-macro=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("arcmt-action="),
joinpd1("ast-dump-all="),
.{
    .name = "autocomplete=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("falign-jumps="),
joinpd1("falign-loops="),
joinpd1("faligned-new="),
joinpd1("ferror-limit="),
joinpd1("ffp-contract="),
joinpd1("fmodule-file="),
joinpd1("fmodule-name="),
joinpd1("fmsc-version="),
.{
    .name = "fno-sanitize=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("foffload-lto="),
joinpd1("fpack-struct="),
joinpd1("fpass-plugin="),
joinpd1("fprofile-dir="),
joinpd1("fprofile-use="),
joinpd1("frandom-seed="),
joinpd1("ftime-report="),
joinpd1("gsplit-dwarf="),
jspd1("isystem-after"),
joinpd1("malign-jumps="),
joinpd1("malign-loops="),
joinpd1("mimplicit-it="),
.{
    .name = "offload-arch=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
jspd1("pagezero_size"),
joinpd1("resource-dir="),
.{
    .name = "dyld-prefix=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "driver-mode=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("fmax-errors="),
joinpd1("fmax-tokens="),
joinpd1("fno-builtin-"),
joinpd1("fplugin-arg-"),
joinpd1("fvisibility="),
joinpd1("fwchar-type="),
jspd1("fxray-modes="),
.{
    .name = "hip-version=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
jspd1("iwithsysroot"),
.{
    .name = "mexec-model=",
    .syntax = .joined,
    .zig_equivalent = .exec_model,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("mharden-sls="),
joinpd1("mhvx-length="),
joinpd1("mvscale-max="),
joinpd1("mvscale-min="),
jspd1("objc-isystem"),
.{
    .name = "rsp-quoting=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("std-default="),
jspd1("sub_umbrella"),
.{
    .name = "Qpar-report",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Qvec-report",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "errorReport",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "headerName:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "for-linker=",
    .syntax = .joined,
    .zig_equivalent = .for_linker,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "force-link=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
jspd1("client_name"),
jspd1("cxx-isystem"),
joinpd1("fclasspath="),
joinpd1("finit-real="),
joinpd1("fforce-addr"),
joinpd1("ftls-model="),
joinpd1("inline-asm="),
jspd1("ivfsoverlay"),
jspd1("iwithprefix"),
joinpd1("mfloat-abi="),
.{
    .name = "plugin-arg-",
    .syntax = .joined_and_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "ptxas-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "save-stats=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "save-temps=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
joinpd1("stats-file="),
jspd1("sub_library"),
.{
    .name = "CLASSPATH=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "constexpr:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "external:I",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "headerUnit",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "vctoolsdir",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "winsysroot",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "classpath=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "cuda-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("fencoding="),
joinpd1("ffp-model="),
joinpd1("ffpe-trap="),
joinpd1("flto-jobs="),
.{
    .name = "fsanitize=",
    .syntax = .comma_joined,
    .zig_equivalent = .sanitize,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("fuse-cuid="),
jspd1("iframework"),
joinpd1("mtargetos="),
joinpd1("mtls-size="),
.{
    .name = "rocm-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("segs_read_"),
.{
    .name = "unwindlib=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "cgthreads",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "diasdkdir",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "external:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "reference",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "winsdkdir",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "encoding=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "language=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "optimize=",
    .syntax = .joined,
    .zig_equivalent = .optimize,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "resource=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("ast-dump="),
jspd1("c-isystem"),
joinpd1("fcoarray="),
joinpd1("fconvert="),
joinpd1("fc++-abi="),
joinpd1("fextdirs="),
joinpd1("ftabstop="),
.{
    .name = "hip-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
jspd1("idirafter"),
joinpd1("mregparm="),
joinpd1("sycl-std="),
jspd1("undefined"),
.{
    .name = "extdirs=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "imacros=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "sysroot=",
    .syntax = .joined,
    .zig_equivalent = .sysroot,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
jspd1("dsym-dir"),
joinpd1("fopenmp="),
joinpd1("fplugin="),
joinpd1("fuse-ld="),
joinpd1("fveclib="),
jspd1("isysroot"),
.{
    .name = "ld-path=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("mcmodel="),
joinpd1("mconsole"),
joinpd1("mdouble="),
joinpd1("mfpmath="),
joinpd1("mhwmult="),
joinpd1("mthreads"),
joinpd1("municode"),
joinpd1("mwindows"),
.{
    .name = "offload=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
jspd1("seg1addr"),
.{
    .name = "assert=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "mhwdiv=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "output=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "prefix=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "cl-ext=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("cl-std="),
joinpd1("fcheck="),
.{
    .name = "imacros",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "include",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
jspd1("iprefix"),
jspd1("isystem"),
joinpd1("mhwdiv="),
joinpd1("moslib="),
.{
    .name = "mrecip=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "stdlib=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "target=",
    .syntax = .joined,
    .zig_equivalent = .target,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("triple="),
.{
    .name = "verify=",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("Rpass="),
.{
    .name = "Xarch_",
    .syntax = .joined_and_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "await:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "clang:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "guard:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "debug=",
    .syntax = .joined,
    .zig_equivalent = .debug,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "param=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "warn-=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("fixit="),
joinpd1("gstabs"),
joinpd1("gxcoff"),
jspd1("iquote"),
.{
    .name = "march=",
    .syntax = .joined,
    .zig_equivalent = .mcpu,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "mtune=",
    .syntax = .joined,
    .zig_equivalent = .mcpu,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "rtlib=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "specs=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "weak-l",
    .syntax = .joined,
    .zig_equivalent = .weak_library,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "Ofast",
    .syntax = .flag,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
jspd1("Tdata"),
jspd1("Ttext"),
.{
    .name = "arch:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "favor",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "imsvc",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "tune:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "warn-",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = false,
    .pd2 = true,
    .psl = false,
},
joinpd1("cuid="),
.{
    .name = "flto=",
    .syntax = .joined,
    .zig_equivalent = .lto,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("gcoff"),
joinpd1("mabi="),
joinpd1("mabs="),
joinpd1("masm="),
.{
    .name = "mcpu=",
    .syntax = .joined,
    .zig_equivalent = .mcpu,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("mfpu="),
joinpd1("mhvx="),
joinpd1("mmcu="),
joinpd1("mnan="),
jspd1("Tbss"),
.{
    .name = "link",
    .syntax = .remaining_args_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "std:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
joinpd1("ccc-"),
joinpd1("gvms"),
joinpd1("mdll"),
joinpd1("mtp="),
.{
    .name = "std=",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = true,
    .psl = false,
},
.{
    .name = "Wa,",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "Wl,",
    .syntax = .comma_joined,
    .zig_equivalent = .wl,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "Wp,",
    .syntax = .comma_joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "Fe:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "RTC",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zc:",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "clr",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "doc",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
joinpd1("gz="),
joinpd1("A-"),
joinpd1("G="),
.{
    .name = "MF",
    .syntax = .joined_or_separate,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "MJ",
    .syntax = .joined_or_separate,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "MQ",
    .syntax = .joined_or_separate,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "MT",
    .syntax = .joined_or_separate,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "AI",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "EH",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "FA",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "FI",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "FR",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "FU",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fa",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fd",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fe",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fi",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fm",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fo",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fp",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Fr",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Gs",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "MP",
    .syntax = .joined,
    .zig_equivalent = .dep_file,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Tc",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Tp",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Yc",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Yl",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Yu",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "ZW",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zm",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "Zp",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "d2",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "vd",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "wd",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
jspd1("A"),
jspd1("B"),
jspd1("D"),
.{
    .name = "F",
    .syntax = .joined_or_separate,
    .zig_equivalent = .framework_dir,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
jspd1("G"),
jspd1("I"),
jspd1("J"),
.{
    .name = "L",
    .syntax = .joined_or_separate,
    .zig_equivalent = .lib_dir,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "O",
    .syntax = .joined,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
joinpd1("R"),
.{
    .name = "T",
    .syntax = .joined_or_separate,
    .zig_equivalent = .linker_script,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
jspd1("U"),
jspd1("V"),
joinpd1("W"),
joinpd1("X"),
joinpd1("Z"),
.{
    .name = "D",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "F",
    .syntax = .joined_or_separate,
    .zig_equivalent = .framework_dir,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "I",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "O",
    .syntax = .joined,
    .zig_equivalent = .optimize,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "U",
    .syntax = .joined_or_separate,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "o",
    .syntax = .joined_or_separate,
    .zig_equivalent = .o,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
.{
    .name = "w",
    .syntax = .joined,
    .zig_equivalent = .other,
    .pd1 = true,
    .pd2 = false,
    .psl = true,
},
joinpd1("a"),
jspd1("b"),
joinpd1("d"),
.{
    .name = "e",
    .syntax = .joined_or_separate,
    .zig_equivalent = .entry,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "l",
    .syntax = .joined_or_separate,
    .zig_equivalent = .l,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
.{
    .name = "o",
    .syntax = .joined_or_separate,
    .zig_equivalent = .o,
    .pd1 = true,
    .pd2 = false,
    .psl = false,
},
jspd1("u"),
jspd1("x"),
joinpd1("y"),
};};
