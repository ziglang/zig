<lcgdict>

  <class pattern="*_defaulter" />
  <function pattern="*_defaulter_func" />

  <class name="base_class" />
  <class name="derived_class" />

  <class name="a_class" />
  <class name="b_class" />
  <class name="c_class" />
  <class name="c_class_1" />
  <class name="c_class_2" />
  <class name="d_class" />

  <function pattern="create_*" />
  <function pattern="get_*" />

  <class pattern="T1<*>" />
  <class pattern="T2<*>" />
  <class pattern="T3<*>" />

  <namespace name="a_ns" />
  <namespace name="a_ns::d_ns" />
  <class pattern="a_ns::*" />
  <variable name="a_ns::g_a" />
  <function name="a_ns::get_g_a" />
  <variable name="a_ns::d_ns::g_d" />
  <function name="a_ns::d_ns::get_g_d" />

  <class name="some_abstract_class" />
  <class name="some_concrete_class" />
  <class name="some_convertible" />
  <class name="some_class_with_data" />
  <class name="some_class_with_data::some_data" />
  <class name="refers_to_self" />

  <class name="some_comparable" />
  <function name="operator==" />
  <function name="operator!=" />

  <variable name="my_global_double" />
  <variable name="my_global_array" />
  <variable name="my_global_ptr" />
  <variable name="my_global_int_holders" />

  <class name="ref_tester" />
  <class name="std::vector<ref_tester>" />

  <class name="pointer_pass" />

  <class pattern="multi*" />

  <class name="new_overloader" />

  <class name="std::vector<float>" />
  <class pattern="my_templated_class<*>" />
  <function pattern="my_templated_function<*>" />

  <class name="overload_one_way" />
  <class name="overload_the_other_way" />

  <class name="Thrower" />
  <class pattern="Using*" />
  <class name="TypedefToPrivateClass" />

</lcgdict>
