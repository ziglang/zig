#target=x86_64-linux-selfhosted
#target=x86_64-linux-cbe
#target=x86_64-windows-cbe
#update=initial version
#file=main.zig
pub fn main() !u8 {
    var a: u8 = undefined;
    a = 255;
    _ = a + 1;
    return 1;
}
pub const panic = std.debug.FullPanic(myPanic);
fn myPanic(msg: []const u8, _: ?usize) noreturn {
    std.io.getStdOut().writer().print("panic message: {s}\n", .{msg}) catch {};
    std.process.exit(0);
}
const std = @import("std");
#expect_stdout="panic message: integer overflow\n"

#update=change the panic handler body
#file=main.zig
pub fn main() !u8 {
    var a: u8 = undefined;
    a = 255;
    _ = a + 1;
    return 1;
}
pub const panic = std.debug.FullPanic(myPanic);
fn myPanic(msg: []const u8, _: ?usize) noreturn {
    std.io.getStdOut().writer().print("new panic message: {s}\n", .{msg}) catch {};
    std.process.exit(0);
}
const std = @import("std");
#expect_stdout="new panic message: integer overflow\n"

#update=change the panic handler function value
#file=main.zig
pub fn main() !u8 {
    var a: u8 = undefined;
    a = 255;
    _ = a + 1;
    return 1;
}
pub const panic = std.debug.FullPanic(myPanicNew);
fn myPanicNew(msg: []const u8, _: ?usize) noreturn {
    std.io.getStdOut().writer().print("third panic message: {s}\n", .{msg}) catch {};
    std.process.exit(0);
}
const std = @import("std");
#expect_stdout="third panic message: integer overflow\n"
